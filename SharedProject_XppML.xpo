Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; Microsoft Dynamics AX Table : XppMLReviewTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #XppMLReviewTable
    EnforceFKRelation 1
    PROPERTIES
      Name                #XppMLReviewTable
      Label               #@PML48
      TitleField1         #Name
      TitleField2         #BaseReviewRef
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Framework
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #NameIdx
      DeveloperDocumentation  #@pml91
      Origin              #{103C8AA0-9EC8-4FB8-B9DB-4E0F830452A6}
    ENDPROPERTIES
    
    FIELDS
      FIELD #BaseReviewRef
        INT64
        PROPERTIES
          Name                #BaseReviewRef
          Label               #@SYS28688
          HelpText            #@PML86
          Table               #XppMLReviewTable
          RelationContext     #BaseReviewTable
          Origin              #{E75E996D-C7FF-4440-A210-0C3C2AAC480B}
          ExtendedDataType    #XppMLReviewTableRef
        ENDPROPERTIES
        
      FIELD #Collection
        STRING
        PROPERTIES
          Name                #Collection
          Label               #@PML95
          HelpText            #@PML96
          Table               #XppMLReviewTable
          Origin              #{3585B0D1-FB09-458F-9DA9-E452DDA5204F}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #LastExecuted
        DATETIME
        PROPERTIES
          Name                #LastExecuted
          Label               #@PML76
          HelpText            #@PML85
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLReviewTable
          Origin              #{6310B48C-AB4C-44BA-9A55-9558182FDFDC}
          ExtendedDataType    #TransDateTime
        ENDPROPERTIES
        
      FIELD #Name
        STRING
        PROPERTIES
          Name                #Name
          Mandatory           #Yes
          Table               #XppMLReviewTable
          Origin              #{62EF7BBD-1AFF-42B7-A1E5-6FD1E3361765}
          ExtendedDataType    #XppMLReviewName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #ProjectSource
        ENUM
        PROPERTIES
          Name                #ProjectSource
          Label               #@PML97
          HelpText            #@PML98
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLReviewTable
          Origin              #{D3816C3A-6A75-425F-B1A0-0B061AF523EA}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #QtyMethods
        INT
        PROPERTIES
          Name                #QtyMethods
          Label               #@SYS25613
          HelpText            #@PML84
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLReviewTable
          Origin              #{A043D716-3875-49EF-A05E-8D38FE339F62}
          ExtendedDataType    #Counter
        ENDPROPERTIES
        
      FIELD #QtyResults
        INT
        PROPERTIES
          Name                #QtyResults
          Label               #@PML53
          HelpText            #@PML83
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLReviewTable
          Origin              #{58F485E6-B037-48B8-A653-CAC60CE5D971}
          ExtendedDataType    #Counter
        ENDPROPERTIES
        
      FIELD #XPathFilterExpression
        STRING
        PROPERTIES
          Name                #XPathFilterExpression
          Label               #@PML81
          HelpText            #@PML82
          Table               #XppMLReviewTable
          Origin              #{9B622026-74EB-40D1-9DFB-0AA080831AEE}
          ExtendedDataType    #XppMLxPathExpression
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #XPathResultExpression
        STRING
        PROPERTIES
          Name                #XPathResultExpression
          Label               #@PML53
          HelpText            #@PML78
          Table               #XppMLReviewTable
          Origin              #{D3AF088F-78E0-43A1-A6F9-EF001BD4194E}
          ExtendedDataType    #XppMLxPathExpression
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #XPathSelectExpression
        STRING
        PROPERTIES
          Name                #XPathSelectExpression
          Label               #@PML79
          HelpText            #@PML80
          Table               #XppMLReviewTable
          Origin              #{7C634870-6BDD-484F-A590-7F65509D498B}
          ExtendedDataType    #XppMLxPathExpression
          StringSize          #400
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #BaseReviewRef
          #LastExecuted
          #Name
          #XPathFilterExpression
          #XPathResultExpression
          #XPathSelectExpression
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #Name
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BaseReview
        PROPERTIES
          Name                #BaseReview
          Label               #@PML77
        ENDPROPERTIES
        
        GROUPFIELDS
          #BaseReviewRef
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Collection
        PROPERTIES
          Name                #Collection
          Label               #@PML95
        ENDPROPERTIES
        
        GROUPFIELDS
          #Collection
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Expressions
        PROPERTIES
          Name                #Expressions
          Label               #@PML60
        ENDPROPERTIES
        
        GROUPFIELDS
          #XPathSelectExpression
          #XPathFilterExpression
          #XPathResultExpression
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LastExecution
        PROPERTIES
          Name                #LastExecution
          Label               #@PML76
        ENDPROPERTIES
        
        GROUPFIELDS
          #LastExecuted
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Name
        PROPERTIES
          Name                #Name
          Label               #@PML75
        ENDPROPERTIES
        
        GROUPFIELDS
          #Name
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Project
        PROPERTIES
          Name                #Project
          Label               #@PML97
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjectSource
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #QtyMethodsResults
        PROPERTIES
          Name                #QtyMethodsResults
          Label               #@PML74
        ENDPROPERTIES
        
        GROUPFIELDS
          #QtyMethods
          #QtyResults
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #NameIdx
      PROPERTIES
        Name                #NameIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{6D8EAA3F-3A75-4CA9-988A-44AC470B018C}
      ENDPROPERTIES
      
      INDEXFIELDS
        #Name
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #BaseReviewTable
        PROPERTIES
          Name                #BaseReviewTable
          Table               #XppMLReviewTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BaseReviewRef
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #XppMLResultLine(ReviewTable)
      PROPERTIES
        Table               #XppMLResultLine
        DeleteAction        #Cascade
        Relation            #ReviewTable
      ENDPROPERTIES
      
      #XppMLReviewMethod(ReviewTable)
      PROPERTIES
        Table               #XppMLReviewMethod
        DeleteAction        #Cascade
        Relation            #ReviewTable
      ENDPROPERTIES
      
      #XppMLReviewTable(BaseReviewTable)
      PROPERTIES
        Table               #XppMLReviewTable
        DeleteAction        #Restricted
        Relation            #BaseReviewTable
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #baseReviewTable
        #public XppMLReviewTable baseReviewTable(boolean _forUpdate = false)
        #{
        #    return  XppMLReviewTable::findByReviewTableRef(
        #            this.BaseReviewRef
        #        ,   _forUpdate
        #        );
        #}
      ENDSOURCE
      SOURCE #execute
        #public server void execute(boolean _test = false)
        #{
        #    XppMLParameters                 parameters = XppMLParameters::find();
        #    XppMLSourceUpdateTmp            sourceUpdateTmp;
        #    XppMLMarkup                     markup;
        #    SqlStatementExecutePermission   perm;
        #    XppMLReviewMethod               reviewMethod;
        #    XppMLResultLine                 resultLine;
        #    XppMLReviewTableRef             reviewTableRef = this.RecId;
        #    XmlDocument                     xmlDocument;
        #    XmlNode                         xmlNode;
        #    XmlNodeList                     xmlNodeList;
        #    str                             stmt;
        #    int                             i;
        #    RecordInsertList                resultLineInsertList;
        #    str                             baseJoin;
        #    str                             baseWhere;
        #    str                             whereSource = this.XPathSelectExpression ? ' Source.exist(%4) = 1  ' : '';
        #    str                             whereWord = whereSource ? ' WHERE ' : '' ;
        #    str                             andWord = whereSource ? ' AND ' : '';
        #    int                             topValue = parameters.TopValue ? parameters.TopValue : 10 ;
        #    str                             selectTop = _test ? ' TOP '+int2str(topValue) : '';
        #
        #    select firstOnly sourceUpdateTmp; //instantiate the temp table
        #
        #    if(this.BaseReviewRef)
        #    {
        #        whereWord = ' WHERE ';
        #
        #        baseJoin = strFmt(
        #                    ' JOIN %1 ON(%1.%2 = %3.%4) '
        #                ,   tableStr(XppMLReviewMethod)
        #                ,   fieldStr(XppMLReviewMethod,xRefPathsRef)
        #                ,   parameters.SQLTableFullName
        #                ,   'XREFPATHSREF'
        #                );
        #
        #        baseWhere = strFmt(
        #                        andWord + ' %1.%2 = \'%3\' '
        #                    ,   tableStr(XppMLReviewMethod)
        #                    ,   fieldStr(XppMLReviewMethod,ReviewTableRef)
        #                    ,   int642str(this.BaseReviewRef)
        #                    );
        #    }
        #
        #    stmt = strFmt(
        #            'INSERT INTO tempdb.dbo.%1 (%2) SELECT '+ selectTop +' %3.XREFPATHSREF FROM %3 ' + baseJoin + whereWord + whereSource
        #            + baseWhere
        #        ,   sourceUpdateTmp.getPhysicalTableName()
        #        ,   new DictField(sourceUpdateTmp.TableId,fieldNum(XppMLSourceUpdateTmp,xRefPathRecId)).name(DbBackend::Sql)
        #        ,   parameters.SQLTableFullName
        #        ,   '\''+this.XPathSelectExpression+'\''
        #        );
        #
        #    perm = new SqlStatementExecutePermission(stmt);
        #    perm.assert();
        #
        #    new Connection().createStatement().executeUpdate(stmt);
        #
        #    delete_from reviewMethod
        #    where   reviewMethod.ReviewTableRef == reviewTableRef;
        #
        #    delete_from resultLine
        #    where   resultLine.ReviewTableRef == reviewTableRef;
        #
        #    if(this.XPathFilterExpression)
        #    {
        #        sourceUpdateTmp.skipTTSCheck(true);
        #
        #        while
        #            select  markup
        #            join    sourceUpdateTmp
        #            where   sourceUpdateTmp.xRefPathRecId == markup.RecId
        #        {
        #            if(markup.XppML)
        #            {
        #                xmlDocument = XmlDocument::newXml(markup.XppML);
        #                xmlNode = xmlDocument.selectSingleNode(this.XPathFilterExpression);
        #
        #                if(!xmlNode)
        #                {
        #                    //BP deviation documented
        #                    sourceUpdateTmp.delete();
        #                }
        #                else if( this.XPathResultExpression )
        #                {
        #                    xmlNodeList = xmlDocument.selectNodes(this.XPathResultExpression);
        #
        #                    if(xmlNodeList.length())
        #                    {
        #                        for(i=0;i<xmlNodeList.length();i++)
        #                        {
        #                            xmlNode = xmlNodeList.item(i);
        #                            XppMLResultLine::createFromCode(reviewTableRef,markup.RecId,xmlNode);
        #                        }
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                sourceUpdateTmp.delete();
        #            }
        #        }
        #    }
        #
        #    insert_recordset reviewMethod(ReviewTableRef,xRefPathsRef)
        #    select reviewTableRef,xRefPathRecId
        #    from    sourceUpdateTmp;
        #
        #
        #
        #    if(     this.XPathResultExpression
        #        && !this.XPathFilterExpression
        #        )
        #    {
        #        resultLineInsertList = new RecordInsertList(tableNum(XppMLResultLine));
        #
        #        while
        #            select  markup
        #            join    sourceUpdateTmp
        #            where   sourceUpdateTmp.xRefPathRecId == markup.RecId
        #        {
        #            if(markup.XppML)
        #            {
        #                xmlDocument = XmlDocument::newXml(markup.XppML);
        #                xmlNodeList = xmlDocument.selectNodes(this.XPathResultExpression);
        #
        #                if(xmlNodeList.length())
        #                {
        #                    for(i=0;i<xmlNodeList.length();i++)
        #                    {
        #                        xmlNode = xmlNodeList.item(i);
        #                        resultLineInsertList.add(XppMLResultLine::createFromCode(reviewTableRef,markup.RecId,xmlNode,false));
        #                    }
        #                }
        #            }
        #        }
        #
        #        resultLineInsertList.insertDatabase();
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    ttsBegin;
        #
        #    this.validateBase();
        #
        #    super();
        #
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #update
        #public void update()
        #{
        #    XppMLReviewTable orig = this.orig();
        #
        #    ttsBegin;
        #
        #    this.validateBase();
        #
        #    if(     !this.LastExecuted
        #        ||  orig.LastExecuted != this.LastExecuted
        #        )
        #    {
        #        this.updateChildLastExecuted();
        #    }
        #    super();
        #
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #updateChildLastExecuted
        #public void updateChildLastExecuted()
        #{
        #    XppMLReviewTable    child;
        #
        #    while select forUpdate child
        #    where child.BaseReviewRef == this.RecId
        #    {
        #        child.LastExecuted = DateTimeUtil::minValue();
        #
        #        if(!child.validateWrite())
        #        {
        #            throw error(Error::wrongUseOfFunction(funcName()));
        #        }
        #
        #        child.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #updateQty
        #public void updateQty()
        #{
        #    XppMLReviewMethod   methods;
        #    XppMLResultLine     results;
        #
        #    select count(RecId) from methods where methods.ReviewTableRef == this.RecId;
        #    this.QtyMethods = int642int(methods.RecId);
        #
        #    select count(RecId) from results where results.ReviewTableRef == this. RecId;
        #    this.QtyResults = int642int(results.RecId);
        #}
      ENDSOURCE
      SOURCE #validateBase
        #private boolean validateBase(boolean _throwOnError = true)
        #{
        #    XppMLReviewTable baseReview = this.baseReviewTable();
        #    Set             recIds = new Set(Types::Int64);
        #    recIds.add(this.RecId);
        #
        #    while(baseReview)
        #    {
        #        if(recIds.in(baseReview.RecId))
        #        {
        #            error("@PML92");
        #            if(_throwOnError)
        #            {
        #                throw Exception::Error;
        #            }
        #            return false;
        #        }
        #        recIds.add(baseReview.RecId);
        #        baseReview = baseReview.baseReviewTable();
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateField
        #public boolean validateField(FieldId _fieldIdToCheck)
        #{
        #    boolean ret;
        #
        #    ret = super(_fieldIdToCheck);
        #
        #    if(_fieldIdToCheck == fieldNum(XppMLReviewTable,BaseReviewRef))
        #    {
        #        ret = this.validateBase(false) && ret;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #anyChildExists
        #public static boolean anyChildExists(XppMLReviewTableRef _reviewRecId)
        #{
        #    XppMLReviewTable    reviewTable;
        #
        #    select firstOnly firstFast RecId
        #    from reviewTable
        #    where reviewTable.BaseReviewRef == _reviewRecId;
        #
        #    return reviewTable.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #escape
        #private static str escape(str _xPathExpression,str _delimiter = '\'')
        #{
        #    str ret = _xPathExpression;
        #    int i = 1;
        #
        #    for(    i = strFind(ret,_delimiter,i,strLen(ret))
        #        ;   i
        #        ;   i = strFind(ret,_delimiter,i,strLen(ret))
        #        )
        #    {
        #        ret = subStr(ret,1,i)+'\''+subStr(ret,i+1,strLen(ret));
        #        i += 2;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #findByName
        #public static XppMLReviewTable findByName(XppMLReviewName _name, boolean _forUpdate = false)
        #{
        #    XppMLReviewTable    reviewTable;
        #
        #    if(_name)
        #    {
        #        reviewTable.selectForUpdate(_forUpdate);
        #
        #        select firstOnly reviewTable
        #        where   reviewTable.Name == _name;
        #    }
        #
        #    return reviewTable;
        #}
      ENDSOURCE
      SOURCE #findByReviewTableRef
        #public static XppMLReviewTable findByReviewTableRef(XppMLReviewTableRef _reviewTableRef, boolean _forUpdate = false)
        #{
        #    XppMLReviewTable    reviewTable;
        #
        #    if(_reviewTableRef)
        #    {
        #        reviewTable.selectForUpdate(_forUpdate);
        #
        #        select firstOnly reviewTable
        #        where   reviewTable.RecId == _reviewTableRef;
        #    }
        #
        #    return reviewTable;
        #}
      ENDSOURCE
      SOURCE #lookupBySTypeReference
        #public static Common lookupBySTypeReference(FormReferenceControl    _formReferenceControl)
        #{
        #    Query                   lookupQuery;
        #    QueryBuildDataSource    rewiewQbds;
        #    SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(XppMLReviewTable),_formReferenceControl, true);
        #
        #    sysTableLookup.addLookupfield(fieldNum(XppMLReviewTable, Name));
        #
        #    lookupQuery = new Query();
        #    rewiewQbds = lookupQuery.addDataSource(tableNum(XppMLReviewTable));
        #
        #    sysTableLookup.parmQuery(lookupQuery);
        #
        #    return sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #resolveReference
        #public static Common resolveReference(FormReferenceControl _formReferenceControl)
        #{
        #    FieldBinding fieldBinding = AbsoluteFieldBinding::construct(
        #            fieldStr(XppMLReviewTable,Name)
        #        ,   tableStr(XppMLReviewTable)
        #        );
        #
        #    return XppMLReviewTable::findByName(_formReferenceControl.filterValue(fieldBinding).value());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : XppMLReviewMethod unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #XppMLReviewMethod
    EnforceFKRelation 1
    PROPERTIES
      Name                #XppMLReviewMethod
      Label               #@PML71
      TitleField1         #xRefPathsRef
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Framework
      PrimaryIndex        #ReviewTableRefXRefPathsRefIdx
      ClusterIndex        #ReviewTableRefXRefPathsRefIdx
      CreatedDateTime     #Yes
      DeveloperDocumentation  #@PML90
      Origin              #{FE795C9F-8872-4821-98A2-F9D5AA9001D4}
    ENDPROPERTIES
    
    FIELDS
      FIELD #ReviewTableRef
        INT64
        PROPERTIES
          Name                #ReviewTableRef
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #XppMLReviewMethod
          Origin              #{824E9302-7B24-4AE7-A147-8D7D457DE688}
          ExtendedDataType    #XppMLReviewTableRef
        ENDPROPERTIES
        
      FIELD #xRefPathsRef
        INT64
        PROPERTIES
          Name                #xRefPathsRef
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLReviewMethod
          IgnoreEDTRelation   #Yes
          Origin              #{229775AE-5429-4FC6-8282-95D09E26230D}
          ExtendedDataType    #xRefPathRecId
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #xRefPathsRef
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReviewTableRef
          #xRefPathsRef
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #xRefPath
        PROPERTIES
          Name                #xRefPath
          Label               #@SYS55485
        ENDPROPERTIES
        
        GROUPFIELDS
          #xRefPathsRef
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ReviewTableRefXRefPathsRefIdx
      PROPERTIES
        Name                #ReviewTableRefXRefPathsRefIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{A30439E5-FF43-48C9-BA3D-48C9B58FDC5F}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ReviewTableRef
        #xRefPathsRef
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #ReviewTable
        PROPERTIES
          Name                #ReviewTable
          Table               #XppMLReviewTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ReviewTableRef
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #xRefPaths
        PROPERTIES
          Name                #xRefPaths
          Table               #xRefPaths
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefPathsRef
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #xRefPathsTable
        #public xRefPaths xRefPathsTable()
        #{
        #    return xRefPaths::findRecId(this.xRefPathsRef);
        #}
      ENDSOURCE
      SOURCE #findByReviewTableRefxRefPathsRef
        #public static XppMLReviewMethod findByReviewTableRefxRefPathsRef(
        #        XppMLReviewTableRef _reviewTableRef
        #    ,   xRefPathRecId       _xRefPathsRef
        #    ,   boolean             _forUpdate = false
        #    )
        #{
        #    XppMLReviewMethod xppMLReviewMethod;
        #
        #    if(_reviewTableRef)
        #    {
        #        xppMLReviewMethod.selectForUpdate(_forUpdate);
        #
        #        select firstOnly xppMLReviewMethod
        #        where   xppMLReviewMethod.ReviewTableRef    == _reviewTableRef
        #            &&  xppMLReviewMethod.xRefPathsRef      == _xRefPathsRef;
        #    }
        #
        #    return xppMLReviewMethod;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : XppMLResultLine unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #XppMLResultLine
    EnforceFKRelation 1
    PROPERTIES
      Name                #XppMLResultLine
      Label               #@PML104
      TitleField1         #Result
      TitleField2         #xRefPathsRef
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Framework
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #ReviewTableRefXRefPathsRefIdx
      DeveloperDocumentation  #@PML101
      Origin              #{20270AB9-C562-4C0F-99CE-625D8466966B}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Result
        STRING
        PROPERTIES
          Name                #Result
          Label               #@SYS6769
          HelpText            #@PML103
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLResultLine
          Origin              #{5363EF6B-2E2F-4126-A7BD-78947321D136}
          ExtendedDataType    #XppML
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #ReviewTableRef
        INT64
        PROPERTIES
          Name                #ReviewTableRef
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #XppMLResultLine
          Origin              #{8A2D7963-DA2C-4828-BBD5-090D9A659813}
          ExtendedDataType    #XppMLReviewTableRef
        ENDPROPERTIES
        
      FIELD #xRefPathsRef
        INT64
        PROPERTIES
          Name                #xRefPathsRef
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLResultLine
          IgnoreEDTRelation   #Yes
          Origin              #{4737AE5B-0B55-417B-AD83-81C089BBDDC0}
          ExtendedDataType    #xRefPathRecId
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReviewTableRef
          #Result
          #xRefPathsRef
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #General
        PROPERTIES
          Name                #General
          Label               #@SYS35893
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReviewTableRef
          #xRefPathsRef
          #Result
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Results
        PROPERTIES
          Name                #Results
          Label               #@PML53
        ENDPROPERTIES
        
        GROUPFIELDS
          #Result
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ReviewTableRefXRefPathsRefIdx
      PROPERTIES
        Name                #ReviewTableRefXRefPathsRefIdx
        Origin              #{B4E29EC9-8F67-421B-8384-012B1B853A68}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ReviewTableRef
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #ReviewMethod
        PROPERTIES
          Name                #ReviewMethod
          Table               #XppMLReviewMethod
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefPathsRef
            RelatedField        #xRefPathsRef
          ENDPROPERTIES
          
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ReviewTableRef
            RelatedField        #ReviewTableRef
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ReviewTable
        PROPERTIES
          Name                #ReviewTable
          Table               #XppMLReviewTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ReviewTableRef
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #xRefPaths
        PROPERTIES
          Name                #xRefPaths
          Table               #xRefPaths
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefPathsRef
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #reviewMethod
        #public XppMLReviewMethod reviewMethod()
        #{
        #    return XppMLReviewMethod::findByReviewTableRefxRefPathsRef(
        #            this.ReviewTableRef
        #        ,   this.xRefPathsRef
        #        );
        #}
      ENDSOURCE
      SOURCE #xRefPaths
        #public xRefPaths xRefPaths()
        #{
        #    return xRefPaths::findRecId(this.xRefPathsRef);
        #}
      ENDSOURCE
      SOURCE #createFromCode
        #public static XppMLResultLine createFromCode(
        #        XppMLReviewTableRef _reviewTableRef
        #    ,   xRefPathRecId       _xRefPathRecId
        #    ,   XmlNode             _xmlNode
        #    ,   boolean             _insert = true
        #)
        #{
        #    XppMLResultLine resultLine;
        #
        #    resultLine.clear();
        #    resultLine.ReviewTableRef   = _reviewTableRef;
        #    resultLine.xRefPathsRef     = _xRefPathRecId;
        #    resultLine.Result           = _xmlNode.xml();
        #
        #    if( _insert )
        #    {
        #        resultLine.insert();
        #    }
        #
        #    return resultLine;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : XppMLSourceUpdateTmp unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #XppMLSourceUpdateTmp
    EnforceFKRelation 1
    PROPERTIES
      Name                #XppMLSourceUpdateTmp
      Label               #@PML99
      TableType           #TempDB
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Framework
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      DeveloperDocumentation  #@PML100
      Origin              #{9B777F42-7158-4B03-9130-749321956791}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Source
        STRING
        PROPERTIES
          Name                #Source
          Table               #XppMLSourceUpdateTmp
          Origin              #{BB8A87CC-349B-4C52-9E3D-596D12369079}
          ExtendedDataType    #XppML
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #xRefPathRecId
        INT64
        PROPERTIES
          Name                #xRefPathRecId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #XppMLSourceUpdateTmp
          IgnoreEDTRelation   #Yes
          RelationContext     #xRefPaths
          Origin              #{7F863C40-741C-4C2F-98D2-5C5B7757E4F7}
          ExtendedDataType    #xRefPathRecId
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #xRefPaths
        PROPERTIES
          Name                #xRefPaths
          Table               #xRefPaths
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefPathRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : XppMLParameters unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #XppMLParameters
    EnforceFKRelation 1
    PROPERTIES
      Name                #XppMLParameters
      Label               #@PML72
      CacheLookup         #EntireTable
      CreateRecIdIndex    #Yes
      TableGroup          #Parameter
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #KeyIdx
      DeveloperDocumentation  #@PML93
      Origin              #{ADE96B7C-C218-4F30-AC8B-CD6659998A3B}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Key
        INT
        PROPERTIES
          Name                #Key
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #XppMLParameters
          Origin              #{FB8F4E93-6C2C-4860-8826-D9517ABAE7C9}
          ExtendedDataType    #ParametersKey
        ENDPROPERTIES
        
      FIELD #SQLTableFullName
        STRING
        PROPERTIES
          Name                #SQLTableFullName
          HelpText            #@PML108
          Table               #XppMLParameters
          Origin              #{D1DC1960-D182-431B-8249-99D0537E9DA3}
          ExtendedDataType    #XppMLSQLName
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #TopValue
        INT
        PROPERTIES
          Name                #TopValue
          HelpText            #@PML109
          Mandatory           #Yes
          Table               #XppMLParameters
          Origin              #{9D0DA67B-83FD-48DF-9767-5F56E71EFA69}
          ExtendedDataType    #XppMLTopValue
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #SQLTableFullName
          #TopValue
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SQLTableFullName
        PROPERTIES
          Name                #SQLTableFullName
          Label               #@PML68
        ENDPROPERTIES
        
        GROUPFIELDS
          #SQLTableFullName
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TopValue
        PROPERTIES
          Name                #TopValue
          Label               #@PML66
        ENDPROPERTIES
        
        GROUPFIELDS
          #TopValue
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #KeyIdx
      PROPERTIES
        Name                #KeyIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{2248DFC4-8E38-4423-8647-3AA86317F4F9}
      ENDPROPERTIES
      
      INDEXFIELDS
        #Key
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #initValue
        #public void initValue()
        #{
        #    this.TopValue = 10;
        #    this.SQLTableFullName = 'XppML.dbo.MARKUP';
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #find
        #public static XppMLParameters find(boolean _forUpdate = false)
        #{
        #    XppMLParameters xppMLParameters;
        #
        #    xppMLParameters.selectForUpdate(_forUpdate);
        #
        #    select firstOnly xppMLParameters
        #    where   xppMLParameters.Key == 0;
        #
        #    if (!xppMLParameters && !xppMLParameters.isTmp())
        #    {
        #        Company::createParameter(xppMLParameters);
        #    }
        #
        #    return xppMLParameters;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: UTS

; Microsoft Dynamics AX String: XppML unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #XppML
  STRING
    PROPERTIES
      Name                #XppML
      Label               #@PML46
      HelpText            #@PML47
      Origin              #{096CA89B-25EB-406A-8D8A-3D936956764A}
      Extends             #XML
      StringSize          #(Memo)
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: XppMLReviewName unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #XppMLReviewName
  STRING
    PROPERTIES
      Name                #XppMLReviewName
      Origin              #{15E4D422-6DE5-4295-BB7A-1418DDAFD726}
      Extends             #Name
      StringSize          #60
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTW

; Microsoft Dynamics AX Int64: XppMLReviewTableRef unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #XppMLReviewTableRef
  INT64
    PROPERTIES
      Name                #XppMLReviewTableRef
      Label               #@PML48
      HelpText            #@pml64
      Origin              #{D477FFC6-1A03-46AB-8080-9A05976F06EB}
      ReferenceTable      #XppMLReviewTable
      Extends             #RefRecId
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
      TYPELOOKUP LOOKUP
      PROPERTIES
        Table               #XppMLReviewTable
        RelatedField        #RecId
      ENDPROPERTIES
      
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: XppMLSQLName unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #XppMLSQLName
  STRING
    PROPERTIES
      Name                #XppMLSQLName
      Label               #@pml68
      HelpText            #@pml69
      Origin              #{7C169859-6061-4C7F-AA76-CEEC11FB504F}
      StringSize          #100
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTI

; Microsoft Dynamics AX Integer: XppMLTopValue unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #XppMLTopValue
  INT
    PROPERTIES
      Name                #XppMLTopValue
      Label               #@pml66
      HelpText            #@pml67
      Origin              #{4B5795F0-7423-4210-9CD5-40827122CECF}
      AllowNegative       #No
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: XppMLxPathExpression unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #XppMLxPathExpression
  STRING
    PROPERTIES
      Name                #XppMLxPathExpression
      Label               #@PML60
      HelpText            #@pml65
      Origin              #{A830E179-8B25-4570-8323-1D463C8919DF}
      StringSize          #400
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE



***Element: VIE

; Microsoft Dynamics AX View : XppMLMarkup unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  VIEW #XppMLMarkup
    PROPERTIES
      Name                #XppMLMarkup
      Label               #@PML63
      TitleField1         #Path
      SaveDataPerPartition #No
	  DeveloperDocumentation  #@PML102
      Origin              #{A298C97E-7A89-411A-BC8E-8A50AE8B3FCC}
    ENDPROPERTIES
    
    QUERY #Metadata
      PROPERTIES
        Name                #Metadata
        Version             #3
        NextUniqueId        #1001
      ENDPROPERTIES
      
      BLOCKS
        BLOCK #xRefPaths
          PROPERTIES
            Name                #xRefPaths
            Table               #xRefPaths
            UniqueId            #1000
          ENDPROPERTIES
          
          FIELDLIST
            PROPERTIES
            ENDPROPERTIES
            
          ENDFIELDLIST
          LINES
          ENDLINES
          BLOCKS
          ENDBLOCKS
          GROUPBY
          ENDGROUPBY
          HAVING
          ENDHAVING
          ORDERBY
          ENDORDERBY
        ENDBLOCK
      ENDBLOCKS
    ENDQUERY
    
    FIELDS
      VIEWFIELD #Path
        PROPERTIES
          Name                #Path
          Table               #XppMLMarkup
          ExtendedDataType    #xRefPath
          StringSize          #400
          DataSource          #xRefPaths
          DataField           #Path
          Origin              #{E9A19023-B543-49A3-BACD-5894DBB6C58F}
        ENDPROPERTIES
        
      ENDVIEWFIELD
  
	  STRINGCOMPUTEDCOLUMN #XppML
        PROPERTIES
          Name                #XppML
          MinReadAccess       #Auto
          Table               #XppMLMarkup
          Origin              #{650E1AE4-9742-4CF5-8D5D-916002432E52}
          ViewMethod          #markupComputedColumn
          ExtendedDataType    #XppML
          StringSize          #(Memo)
        ENDPROPERTIES
        
      ENDSTRINGCOMPUTEDCOLUMN    
      
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #Path
		  #XppML
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    METHODS
      SOURCE #markupComputedColumn
        #private static server str markupComputedColumn()
        #{
        #    XppMLParameters    parameters = XppMLParameters::find();
        #    str stmt;
        #
        #    stmt = strFmt('SELECT SOURCE FROM %1 WHERE XREFPATHSREF = %2'
        #        ,   parameters.SQLTableFullName
        #        ,   SysComputedColumn::comparisonField(
        #                tableStr(XppMLMarkup)
        #            ,   tableStr(xRefPaths)
        #            ,   fieldStr(xRefPaths,RecId)
        #            )
        #        );
        #
        #    return stmt;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDVIEW


***Element: CLS

; Microsoft Dynamics AX Class: XppMLManage unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #XppMLManage
    PROPERTIES
      Name                #XppMLManage
      Origin              #{9860877E-954E-41B7-84FF-27A66A681B9B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #applyCodeView
        #public void applyCodeView()
        #{
        #    TreeNode    node;
        #
        #    codeMarkupActiveX.navigate('');
        #
        #    codeSource.text('');
        #
        #    if(tabPageSource.isExpanded())
        #    {
        #        node = TreeNode::findNode(xppMLMarkup.Path);
        #
        #        if(node)
        #        {
        #            codeSource.text(node.AOTgetSource());
        #        }
        #
        #    }
        #
        #    if(tabPageSourceXml.isExpanded())
        #    {
        #        //this.getXMLSource();
        #        xmlSource = xppMLMarkup.XppML;
        #        this.prepareXmlFile();
        #        codeMarkupActiveX.navigate(codeMarkupFilename);
        #    }
        #}
      ENDSOURCE
      SOURCE #assignTreeIdxRecId
        #private void assignTreeIdxRecId(
        #        TreeItemIdx             _treeIdx
        #    ,   XppMLReviewTableRef     _reviewRecId
        #)
        #{
        #    if( !treeIdx2Recid )
        #    {
        #        treeIdx2Recid = new Map(Types::Integer,Types::Int64);
        #    }
        #
        #    treeIdx2Recid.insert(_treeIdx,_reviewRecId);
        #
        #    if( !viewRecidTreeIdx )
        #    {
        #        viewRecidTreeIdx = new Map(Types::Int64,Types::Integer);
        #    }
        #
        #    viewRecidTreeIdx.insert(_reviewRecId,_treeIdx);
        #}
      ENDSOURCE
      SOURCE #buildTreeView
        #private void buildTreeView()
        #{
        #    XppMLReviewTable    localReview;
        #    int                 localIdx;
        #
        #    if( !treeControl )
        #    {
        #        throw error(Error::wrongUseOfFunction(funcname()));
        #    }
        #    else
        #    {
        #        treeControl.deleteAll();
        #    }
        #
        #    while select Name,RecId
        #    from localReview
        #    where localReview.BaseReviewRef == 0
        #    {
        #        localIdx = SysFormTreeControl::addTreeItem(
        #                                            treeControl
        #                                        ,   localReview.Name
        #                                        ,   FormTreeAdd::Root
        #                                        ,   localReview.Name
        #                                        ,   0
        #                                        ,   XppMLReviewTable::anyChildExists(localReview.RecId)
        #                                    );
        #
        #        this.assignTreeIdxRecId(localIdx,localReview.RecId);
        #
        #        this.createChildTree(localReview.RecId,localIdx);
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class XppMLManage
        #{
        #
        #    XppMLReviewTable    reviewTable;
        #    XppMLReviewMethod   reviewMethod;
        #    XppMLMarkup         xppMLMarkup;
        #
        #    FormTabPageControl  tabPageSource;
        #    FormTabPageControl  tabPageSourceXml;
        #
        #    FormTabPageControl  tabPageGrid;
        #
        #    FormStringControl   codeSource;
        #    FormActiveXControl  codeMarkupActiveX;
        #    Filename            codeMarkupFilename;
        #
        #    FormActiveXControl  resultXmlActiveX;
        #
        #    FormTreeControl     treeControl;
        #
        #    Map                 treeIdx2Recid;
        #    Map                 viewRecidTreeIdx;
        #
        #    str                 xmlSource;
        #
        #}
      ENDSOURCE
      SOURCE #createChildTree
        #private void createChildTree(
        #        XppMLReviewTableRef     _reviewRef
        #    ,   TreeItemIdx             _parentIdx
        #)
        #{
        #    XppMLReviewTable    localReview;
        #    int                 localIdx;
        #
        #    while select Name,RecId
        #    from localReview
        #    where localReview.BaseReviewRef == _reviewRef
        #    {
        #        localIdx  = SysFormTreeControl::addTreeItem(
        #                                            treeControl
        #                                        ,   localReview.Name
        #                                        ,   _parentIdx
        #                                        ,   localReview.Name
        #                                        ,   0
        #                                        ,   XppMLReviewTable::anyChildExists(localReview.RecId)
        #                                        );
        #
        #        this.assignTreeIdxRecId(localIdx,localReview.RecId);
        #
        #        this.createChildTree(localReview.RecId,localIdx);
        #    }
        #}
      ENDSOURCE
      SOURCE #dsActive
        #public void dsActive(FormDataSource _formDataSource)
        #{
        #    switch( _formDataSource.table() )
        #    {
        #        case tableNum(XppMLReviewMethod):
        #            reviewMethod = _formDataSource.cursor();
        #            this.applyCodeView();
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #execute
        #public void execute(boolean _test = false)
        #{
        #    reviewTable.execute(_test);
        #
        #    this.updateReviewTable(_test);
        #}
      ENDSOURCE
      SOURCE #findReviewRecordFromTree
        #public boolean findReviewRecordFromTree()
        #{
        #    XppMLReviewTableRef localRecId;
        #    XppMLReviewTable    localReview;
        #    boolean             ret = false;
        #
        #    int itemIdx = treeControl.getSelection();
        #
        #    if( treeIdx2Recid.exists(itemIdx) )
        #    {
        #        localRecId = treeIdx2Recid.lookup(itemIdx);
        #
        #        localReview = XppMLReviewTable::findByReviewTableRef(localRecId);
        #
        #        ret = reviewTable.dataSource().findRecord(localReview);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #initializeTree
        #public void initializeTree()
        #{
        #    this.buildTreeView();
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    #Aif
        #    codeMarkupFilename = WinAPI::getTempFilename(WinAPI::getTempPath(), 'xml') + #XmlFileExtension;
        #
        #}
      ENDSOURCE
      SOURCE #parmCodeMarkupActiveX
        #public FormActiveXControl parmCodeMarkupActiveX(FormActiveXControl _codeMarkupActiveX = codeMarkupActiveX)
        #{
        #    if(!prmIsDefault(_codeMarkupActiveX))
        #    {
        #        codeMarkupActiveX = _codeMarkupActiveX;
        #    }
        #    return codeMarkupActiveX;
        #}
      ENDSOURCE
      SOURCE #parmCodeSource
        #public FormStringControl parmCodeSource(FormStringControl _codeSource = codeSource)
        #{
        #    if(!prmIsDefault(_codeSource))
        #    {
        #        codeSource = _codeSource;
        #    }
        #    return codeSource;
        #}
      ENDSOURCE
      SOURCE #parmReviewTable
        #public XppMLReviewTable parmReviewTable(XppMLReviewTable _reviewTable = reviewTable)
        #{
        #    if(!prmIsDefault(_reviewTable))
        #    {
        #        reviewTable = _reviewTable;
        #    }
        #    return reviewTable;
        #}
      ENDSOURCE
      SOURCE #parmTabPageSource
        #public FormTabPageControl parmTabPageSource(FormTabPageControl _tabPageSource = tabPageSource)
        #{
        #    if(!prmIsDefault(_tabPageSource))
        #    {
        #        tabPageSource = _tabPageSource;
        #    }
        #    return tabPageSource;
        #}
      ENDSOURCE
      SOURCE #parmTabPageSourceXml
        #public FormTabPageControl parmTabPageSourceXml(FormTabPageControl _tabPageSourceXml = tabPageSourceXml)
        #{
        #    if(!prmIsDefault(_tabPageSourceXml))
        #    {
        #        tabPageSourceXml = _tabPageSourceXml;
        #    }
        #    return tabPageSourceXml;
        #}
      ENDSOURCE
      SOURCE #parmTreeControl
        #public FormTreeControl parmTreeControl(FormTreeControl _treeControl = treeControl)
        #{
        #    if(!prmIsDefault(_treeControl))
        #    {
        #        treeControl = _treeControl;
        #    }
        #    return treeControl;
        #}
      ENDSOURCE
      SOURCE #parmXppMLMarkup
        #public XppMLMarkup parmXppMLMarkup(XppMLMarkup _xppMLMarkup = xppMLMarkup)
        #{
        #    if(!prmIsDefault(_xppMLMarkup))
        #    {
        #        xppMLMarkup = _xppMLMarkup;
        #    }
        #    return xppMLMarkup;
        #}
      ENDSOURCE
      SOURCE #prepareXmlFile
        #private void prepareXmlFile()
        #{
        #    #File
        #    AsciiIo asciiIO;
        #
        #    asciiIO = new AsciiIo(codeMarkupFilename,#io_write);
        #    asciiIO.writeRaw(xmlSource);
        #    asciiIO.finalize();
        #    asciiIO = null;
        #}
      ENDSOURCE
      SOURCE #updateReviewTable
        #private void updateReviewTable(boolean _test = false)
        #{
        #    if(reviewTable)
        #    {
        #        reviewTable.LastExecuted =    _test
        #                            ?   DateTimeUtil::minValue()
        #                            :   DateTimeUtil::getSystemDateTime();
        #
        #        reviewTable.updateQty();
        #
        #        if(!reviewTable.validateWrite())
        #        {
        #            error(Error::wrongUseOfFunction(funcName()));
        #        }
        #        {
        #            if(reviewTable.isFormDataSource())
        #            {
        #                reviewTable.dataSource().write();
        #            }
        #            else
        #            {
        #                reviewTable.update();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #construct
        #public static XppMLManage construct()
        #{
        #    return new XppMLManage();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: XppMLProcessProject unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #XppMLProcessProject
    PROPERTIES
      Name                #XppMLProcessProject
      Extends             #RunBaseBatch
      Origin              #{652EABC8-433F-4393-A803-F4C951A921E0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class XppMLProcessProject extends RunBaseBatch
        #{
        #    #AOT
        #
        #    XppMLSourceMarkup   sourceMarkup;
        #
        #    DialogRunbase       dialog;
        #
        #    TreeNodePath        projectToRun;
        #    ProjectNode         mainNode;
        #    TreeNodeIterator    iterator;
        #
        #    boolean             privateProject;
        #
        #    XppMLReviewTable    reviewTable;
        #
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #        projectToRun,
        #        privateProject
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #createReviewForProject
        #public void createReviewForProject(XppMLSourceUpdateTmp  _sourceUpdate)
        #{
        #    XppMLReviewMethod   reviewMethod;
        #
        #    if( !reviewTable )
        #    {
        #
        #        reviewTable = XppMLReviewTable::findByName(projectToRun,true);
        #
        #        if( !reviewTable )
        #        {
        #            reviewTable.clear();
        #            reviewTable.Name = projectToRun;
        #            reviewTable.ProjectSource = NoYes::Yes;
        #
        #            if( !reviewTable.validateWrite() )
        #            {
        #                throw error(Error::wrongUseOfFunction(funcName()));
        #            }
        #
        #            reviewTable.insert();
        #
        #        }
        #        else
        #        {
        #            reviewTable.LastExecuted = DateTimeUtil::minValue();
        #            reviewTable.QtyMethods = 0;
        #            reviewTable.ProjectSource = NoYes::Yes;
        #
        #            if( !reviewTable.validateWrite() )
        #            {
        #                throw error(Error::wrongUseOfFunction(funcName()));
        #            }
        #
        #            reviewTable.update();
        #
        #            delete_from reviewMethod
        #            where reviewMethod.ReviewTableRef == reviewTable.RecId;
        #
        #        }
        #    }
        #
        #    reviewMethod.clear();
        #    reviewMethod.ReviewTableRef = reviewTable.RecId;
        #    reviewMethod.xRefPathsRef   = _sourceUpdate.xRefPathRecId;
        #
        #    if( !reviewMethod.validateWrite() )
        #    {
        #        throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    reviewMethod.insert();
        #
        #    reviewTable.QtyMethods++;
        #    reviewTable.LastExecuted = DateTimeUtil::getSystemDateTime();
        #
        #}
      ENDSOURCE
      SOURCE #dialog
        #protected Object dialog()
        #{
        #    dialog = Dialog::newFormnameRunbase(formstr(XppMLProcessProjectDialog), this);
        #
        #    dialog = this.dialogInternal(dialog);
        #
        #    return dialog;
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion,#CurrentList];
        #}
      ENDSOURCE
      SOURCE #parmPrivateProject
        #public boolean parmPrivateProject(boolean _privateProject = privateProject)
        #{
        #    if(!prmIsDefault(_privateProject))
        #    {
        #        privateProject = _privateProject;
        #    }
        #    return privateProject;
        #}
      ENDSOURCE
      SOURCE #parmProjectToRun
        #public TreeNodePath parmProjectToRun(TreeNodePath _projectToRun = projectToRun)
        #{
        #    if(!prmIsDefault(_projectToRun))
        #    {
        #        projectToRun = _projectToRun;
        #    }
        #    return projectToRun;
        #}
      ENDSOURCE
      SOURCE #processChild
        #private void processChild(TreeNode _childNode)
        #{
        #    TreeNode            projectTreeNode;
        #    ProjectGroupNode    projectGroup;
        #    TreeNodeIterator    projIterator;
        #
        #    switch( _childNode.AOTObjectNode() )
        #    {
        #        case false:
        #            projectGroup = _childNode;
        #            break;
        #        case true:
        #            projectTreeNode = _childNode;
        #            break;
        #    }
        #
        #    if( projectGroup )
        #    {
        #        projIterator = projectGroup.AOTiterator();
        #        projectTreeNode = projIterator.next();
        #
        #        while( projectTreeNode )
        #        {
        #            this.processChild( projectTreeNode );
        #
        #            projectTreeNode = projIterator.next();
        #        }
        #    }
        #    else
        #    {
        #        this.processSourceMarkup( projectTreeNode );
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #processSourceMarkup
        #private void processSourceMarkup(TreeNode _treeNode)
        #{
        #
        #    if(!sourceMarkup)
        #    {
        #        sourceMarkup = XppMLSourceMarkup::construct();
        #        sourceMarkup.parmXppMLProcessProject(this);
        #    }
        #
        #    sourceMarkup.processTreeNode(_treeNode);
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    ProjectNode    loopNode;
        #
        #    mainNode =      privateProject
        #                ?   TreeNode::findNode(#ProjectPrivatePath+#AOTDelimiter+projectToRun)
        #                :   TreeNode::findNode(#ProjectSharedPath+#AOTDelimiter+projectToRun);
        #
        #    loopNode = mainNode.loadForInspection();
        #
        #    if( loopNode )
        #    {
        #        iterator = loopNode.AOTiterator();
        #
        #        loopNode = iterator.next();
        #    }
        #    else
        #    {
        #        loopNode = null;
        #    }
        #
        #    while( loopNode )
        #    {
        #        this.processChild(loopNode);
        #
        #        loopNode = iterator.next();
        #    }
        #
        #    if( reviewTable )
        #    {
        #        reviewTable.update();
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    Integer     version     = conpeek(packedClass,1);
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList] = packedClass;
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validate
        #public boolean validate(Object calledFrom = null )
        #{
        #    boolean ret;
        #
        #    ret = super(calledFrom);
        #
        #    if( !projectToRun )
        #    {
        #        ret = checkFailed(strFmt('Shared or private project must be set !'));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addProjectsToComboBox
        #public static void addProjectsToComboBox(
        #        FormComboBoxControl     _comboBox
        #    ,   boolean                 _private = false
        #)
        #{
        #    SysModelElement     elements;
        #    UtilElementType     elementType = _private ? UtilElementType::PrivateProject : UtilElementType::SharedProject;
        #
        #    if( !_comboBox )
        #    {
        #        return;
        #    }
        #
        #    while
        #        select elements
        #        where   elements.ElementType == elementType
        #            &&  (   !_private
        #                ||  (   _private
        #                    &&  elements.Name like curUserId()+'*'
        #                    )
        #                )
        #    {
        #        if( _private )
        #        {
        #            _comboBox.add(strReplace(elements.Name,curUserId()+'_',''));
        #        }
        #        else
        #        {
        #            _comboBox.add(elements.Name);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #construct
        #public static XppMLProcessProject construct()
        #{
        #    return new XppMLProcessProject();
        #}
      ENDSOURCE
      SOURCE #description
        #public static Description description()
        #{
        #    return "@PML49";
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    XppMLProcessProject xppMLProcessProject = XppMLProcessProject::construct();
        #
        #    if(xppMLProcessProject.prompt())
        #    {
        #        xppMLProcessProject.run();
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #newParm
        #public static XppMLProcessProject newParm(
        #        boolean         _privateProject
        #    ,   TreeNodePath    _projectToRun
        #    )
        #{
        #    XppMLProcessProject xppMLProcessProject = XppMLProcessProject::construct();
        #
        #    xppMLProcessProject.parmPrivateProject  (_privateProject);
        #    xppMLProcessProject.parmProjectToRun    (_projectToRun);
        #
        #    return xppMLProcessProject;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: XppMLSourceMarkup unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #XppMLSourceMarkup
    PROPERTIES
      Name                #XppMLSourceMarkup
      Extends             #Object
      Origin              #{896B81CD-3BD1-4CCD-8046-1C6DC3F4B976}
    ENDPROPERTIES
    
    METHODS
      SOURCE #buildMethodMarkup
        #public XmlDocument buildMethodMarkup(TreeNode _methodTreeNode,ClassName _superClassName = objectSuperClassName,boolean _formatting = false)
        #{
        #    TreeNodePath    methodPath;
        #    Source          source;
        #    int             symStrLen;
        #    int             lastSymLine,lastSymCol;
        #
        #    inFor       = 0;
        #    insertRecordsetTable = '';
        #    ternary     = 0;
        #    close       = 0;
        #    resume      = '';
        #    postOpen    = '';
        #    lastXml     = null;
        #
        #    symLine     = 0;
        #    symCol      = 0;
        #    par         = 0;
        #    cbr         = 0;
        #    quoteNext   = false;
        #    stmt        = null;
        #
        #    if(!_methodTreeNode)
        #    {
        #        throw error(Error::missingParameter(null));
        #    }
        #    methodPath = _methodTreeNode.treeNodePath();
        #    setPrefix(methodPath);
        #
        #    methodName = _methodTreeNode.AOTname();
        #    source = _methodTreeNode.AOTgetSource();
        #
        #    xmlDoc = new XmlDocument();
        #    xmlSource = xmlDoc.appendChild(xmlDoc.createElement('source'));
        #    curr = xmlSource;
        #    this.open('preamble');
        #
        #    xmlDoc.preserveWhitespace(true);
        #
        #    if(methodName == 'classDeclaration')
        #    {
        #        if(objectType == UtilElementType::Class)
        #        {
        #            this.buildSuperClassDeclarations();
        #        }
        #    }
        #    else if(!declarationDone)
        #    {
        #        throw error("@PML55");
        #    }
        #    scannerClass = new ScannerClass(objectDeclaration+source);
        #
        #    select  xRefReferences
        #    order   line,Column,RecId
        #    where   xRefReferences.Path == methodPath;
        #
        #    sym = scannerClass.firstSymbol();
        #
        #    if(objectDeclarationLines)
        #    {
        #        while(scannerClass.line() <= objectDeclarationLines)
        #        {
        #            sym = scannerClass.nextSymbol();
        #        }
        #    }
        #
        #    symStr  = scannerClass.string();
        #    symLine = scannerClass.line()-objectDeclarationLines;
        #    symCol  = scannerClass.startColumn();
        #
        #    while(sym)
        #    {
        #        if(     sym == #STD_ID
        #            &&  subStr(symStr,1,1) == '@'
        #            )
        #        {
        #            symStr = subStr(symStr,2,strLen(symStr));
        #        }
        #        else if(sym == #STR_SYM)
        #        {
        #            symCol += 1;
        #            if(     symStr
        #                &&  strNFind(symStr,printable,1,strLen(symStr))
        #                )
        #            {
        #                this.symStrEscape();
        #            }
        #        }
        #        else if((   lastSym == #PERIOD_SYM
        #                ||  lastSym == #DBLCOLON_SYM
        #                )
        #            &&  sym != #STD_ID
        #            &&  sym != #LEFT_PAR_SYM
        #            )
        #        {
        #            sym = #STD_ID;
        #        }
        #
        #        if(     _formatting
        #            &&  lastText
        #            )
        #        {
        #            if(lastSymLine == symLine)
        #            {
        #                lastText.parentNode().appendChild(xmlDoc.createTextNode(strRep(' ',symCol-lastSymCol-symStrLen)));
        #            }
        #            else
        #            {
        #                lastText.parentNode().appendChild(xmlDoc.createTextNode(strRep('\n',symLine-lastSymLine)+strRep(' ',symCol)));
        #            }
        #        }
        #
        #        if(     !quoteNext
        #            ||  sym == #STR_SYM
        #            )
        #        {
        #            if(     sym != #STD_ID
        #//                &&  sym != #STR_SYM
        #                )
        #            {
        #                this.preSym();
        #                if(cbr)
        #                {
        #                    this.preSymMain();
        #                }
        #            }
        #            this.xrefSym(_superClassName);
        #        }
        #
        #        symStrLen = strLen(symStr);
        #        if(sym == #STR_SYM)
        #        {
        #            lastText = curr.appendChild(xmlDoc.createTextNode(strFmt(subStr(symStr,1,1) == '@' ? '"%1"' : '\'%1\'',symStr)));
        #            symStrLen += 2;
        #        }
        #        else
        #        {
        #            if(operatorTokensSet.in(sym))
        #            {
        #                this.open('op');
        #                lastText = curr.appendChild(xmlDoc.createTextNode(symStr));
        #                this.closeCurr();
        #            }
        #            else if(sym != #STD_ID
        #                &&  sym != #STR_SYM
        #                &&  keywordTokensSet.in(sym))
        #            {
        #                this.open('kw');
        #                lastText = curr.appendChild(xmlDoc.createTextNode(symStr));
        #                this.closeCurr();
        #            }
        #            else /*if(embeddedTokensSet.in(sym))
        #            {
        #                lastText = curr.appendChild(xmlDoc.createTextNode(symStr));
        #            }
        #            else */
        #            {
        #                lastText = curr.appendChild(xmlDoc.createTextNode(symStr));
        #            }
        #        }
        #
        #        while(close > 0)
        #        {
        #            this.closeCurr();
        #            close -= 1;
        #        }
        #
        #        if(resume)
        #        {
        #            if(curr.getNamedElement(resume))
        #            {
        #                curr = curr.getNamedElement(resume);
        #            }
        #            resume = '';
        #        }
        #
        #        if(quoteNext)
        #        {
        #            quoteNext = false;
        #        }
        #        else if(sym != #STR_SYM
        #            &&  sym != #STD_ID
        #            )
        #        {
        #            this.postSym();
        #        }
        #
        #        if(postOpen)
        #        {
        #            this.open(postOpen);
        #            postOpen = '';
        #        }
        #
        #        lastSymLine = symLine;
        #        lastSymCol  = symCol;
        #        lastSym     = sym;
        #        lastXml     = curr;
        #
        #        if(debug)
        #        {
        #            xmlDoc.save(debugDump);
        #        }
        #
        #        if(nextSym)
        #        {
        #            [sym,symStr,symLine,symCol] = nextSym;
        #            nextSym = conNull();
        #        }
        #        else
        #        {
        #            sym = scannerClass.nextSymbol();
        #            symStr  = scannerClass.string();
        #            symLine = scannerClass.line()-objectDeclarationLines;
        #            symCol  = scannerClass.startColumn();
        #        }
        #    }
        #
        #    if(methodName == 'classDeclaration')
        #    {
        #        declarationDone = true;
        #        if(strFind(source,'#',1,strLen(source)))    //has chance for any macros
        #        {
        #            objectDeclaration += source+'\n';
        #            objectDeclarationLines = strLen(strKeep(objectDeclaration,'\n'));
        #        }
        #    }
        #    return xmlDoc;
        #}
      ENDSOURCE
      SOURCE #buildSuperClassDeclarations
        #private void buildSuperClassDeclarations()
        #{
        #    Source      superSource;
        #    TreeNode    superTreeNode;
        #    ClassName   superClassNameA = objectTreeNode.AOTgetProperty(#PropertyExtends);
        #    ClassName   ret = superClassNameA;
        #
        #    objectSuperClassName = superClassNameA ? superClassNameA : classStr(Object);
        #
        #    if(superClassNameA)
        #    {
        #        objectSuperSet.add(superClassNameA);
        #    }
        #    while(  superClassNameA
        #        &&  superClassNameA != classStr(Object)
        #        )
        #    {
        #        superTreeNode = TreeNode::findNode(#ClassesPath+'\\'+superClassNameA);
        #        if(!superTreeNode)
        #        {
        #            break;
        #        }
        #        superSource = superTreeNode.AOTfindChild('classDeclaration').AOTgetSource();
        #        if(strFind(superSource,'#',1,strLen(superSource)))
        #        {
        #            objectDeclaration = superSource + '\n' + objectDeclaration;
        #        }
        #        superClassNameA = superTreeNode.AOTgetProperty(#PropertyExtends);
        #
        #        if(superClassNameA)
        #        {
        #            objectSuperSet.add(superClassNameA);
        #        }
        #    }
        #
        #    objectDeclarationLines = strLen(strKeep(objectDeclaration,'\n'));
        #}
      ENDSOURCE
      SOURCE #buildSuperTableSet
        #private void buildSuperTableSet()
        #{
        #    TreeNode    superTreeNode;
        #    ClassName   superTableName = objectTreeNode.AOTgetProperty(#PropertyExtends);
        #    objectSuperClassName = superTableName;
        #
        #    while(superTableName)
        #    {
        #        objectSuperSet.add(superTableName);
        #        superTreeNode = TreeNode::findNode(#TablesPath+'\\'+superTableName);
        #        if(!superTreeNode)
        #        {
        #            break;
        #        }
        #        superTableName = superTreeNode.AOTgetProperty(#PropertyExtends);
        #    }
        #    objectSuperSet.add(tableStr(Common));
        #    if(!objectSuperClassName)
        #    {
        #        objectSuperClassName = tableStr(Common);
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class XppMLSourceMarkup extends Object
        #{
        #    //missing definitions
        #    #define.xRefKind_ClrStaticMethod(33)
        #    #define.VALIDTIMESTATE_SYM(168)
        #    #define.CROSSCOMPANY_SYM(165)
        #    #define.UNCHECKED_SYM(167)
        #
        #    UtilElementType objectType;
        #    TreeNodePath    objectPath;
        #    TreeNode        objectTreeNode;
        #    Set             objectSuperSet;
        #    ClassName       objectSuperClassName;
        #
        #    MethodName      methodName;
        #
        #    Source          objectDeclaration;
        #    SourceLineNum   objectDeclarationLines;
        #
        #    int             par;
        #    int             cbr;
        #    int             symLine,symCol;
        #
        #    XmlText         lastText;
        #
        #    XmlDocument     xmlDoc;
        #    XmlElement      xmlSource;
        #    XmlElement      curr;
        #    XmlElement      stmt;
        #
        #    Set             keywordTokensSet;
        #    Set             embeddedTokensSet;
        #    Set             operatorTokensSet;
        #
        #    xRefTmpReferences   xRefReferences;
        #
        #    boolean         debug;
        #    Filename        debugDump;
        #
        #    //-----build
        #    ScannerClass    scannerClass;
        #
        #    int             sym;
        #    int             lastSym;
        #    container       nextSym;
        #    xRefName        symStr;
        #
        #    boolean         quoteNext;
        #    int             inFor;
        #    TableName       insertRecordsetTable;
        #    boolean         inRecordSetStmt;
        #    int             ternary;
        #    int             close;
        #    str             resume;
        #    str             postOpen;
        #    boolean         inExtendedTypeIntr;
        #    boolean         inValidTimeState;
        #
        #    XmlElement      lastXml;
        #
        #    XppMLSourceUpdateTmp  sourceUpdate;
        #    Map             xRefPathsMap;
        #
        #    XppMLParameters parameters;
        #    boolean         declarationDone;
        #
        #    str             printable;
        #
        #    XppMLProcessProject xppMLProcessProject;
        #
        #    #TokenTypes
        #    #Properties
        #    #AOT
        #}
      ENDSOURCE
      SOURCE #closeCurr
        #private void closeCurr()
        #{
        #    XmlElement  xmlElement = curr;
        #    XmlElement  parent = xmlElement.parentNode();
        #
        #    if(curr.hasAttribute('par'))
        #    {
        #        curr.removeAttribute('par');
        #    }
        #
        #    if(curr.hasAttribute('sep'))
        #    {
        #        curr.removeAttribute('sep');
        #    }
        #
        #    if(curr.hasAttribute('cbr'))
        #    {
        #        curr.removeAttribute('cbr');
        #    }
        #
        #    if(     curr.isEmpty()
        #        &&  curr.tagName() != 'bl'
        #        )
        #    {
        #        parent.removeChild(curr);
        #    }
        #    curr = parent;
        #
        #    if(debug)
        #    {
        #        xmlDoc.save(debugDump);
        #    }
        #}
      ENDSOURCE
      SOURCE #closeUpUntilSep
        #private void closeUpUntilSep(str _sep)
        #{
        #    while(curr.getAttribute('sep') != _sep)
        #    {
        #        if(this.getPar() != par)
        #        {
        #            throw error(strFmt('parentheses problem (%1,%2)',symLine,symCol));
        #        }
        #        this.closeCurr();
        #
        #        if(curr.nodeType() != XmlNodeType::Element)
        #        {
        #            throw error('Wrong node type');
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #closeUpUntilTag
        #private void closeUpUntilTag(str _tag)
        #{
        #    while(curr.tagName() != _tag)
        #    {
        #        this.closeCurr();
        #        if(curr.nodeType() != XmlNodeType::Element)
        #        {
        #            throw error('Wrong node type');
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #convertBasicType
        #private void convertBasicType()
        #{
        #    XmlElement      kwElement = curr.selectSingleNode('kw');
        #
        #    if(!kwElement)
        #    {
        #        throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    this.open('type');
        #    curr.appendChild(kwElement);
        #    this.closeCurr();
        #}
      ENDSOURCE
      SOURCE #createSets
        #private void createSets()
        #{
        #    operatorTokensSet = new Set(Types::Integer);
        #
        #    operatorTokensSet.add(#ASG_SYM);    //  =
        #    operatorTokensSet.add(#ASGINC_SYM); //  +=
        #    operatorTokensSet.add(#ASGDEC_SYM); //  -=
        #    operatorTokensSet.add(#PLUS_SYM);   //  +
        #    operatorTokensSet.add(#INC_SYM);    //  ++
        #    operatorTokensSet.add(#MINUS_SYM);  //  -
        #    operatorTokensSet.add(#DEC_SYM);    //  --
        #    operatorTokensSet.add(#UMINUS_SYM); //  -
        #    operatorTokensSet.add(#MULT_SYM);   //  *
        #    operatorTokensSet.add(#DIV_SYM);    //  /
        #    operatorTokensSet.add(#MOD_SYM);    //  mod
        #    operatorTokensSet.add(#INTDIV_SYM); //  div
        #    operatorTokensSet.add(#EQ_SYM);     //  ==
        #    operatorTokensSet.add(#NE_SYM);     //  !=
        #    operatorTokensSet.add(#LT_SYM);     //  <
        #    operatorTokensSet.add(#LE_SYM);     //  <=
        #    operatorTokensSet.add(#GT_SYM);     //  >
        #    operatorTokensSet.add(#GE_SYM);     //  >=
        #
        #    operatorTokensSet.add(#NOT_SYM);    //  !
        #    operatorTokensSet.add(#OR_SYM);     //  ||
        #    operatorTokensSet.add(#AND_SYM);    //  &&
        #    operatorTokensSet.add(#QUEST_SYM);  //  ?
        #    operatorTokensSet.add(#PHYSAND_SYM); //  &
        #    operatorTokensSet.add(#PHYSXOR_SYM); //  ^
        #    operatorTokensSet.add(#PHYSOR_SYM); //  |
        #    operatorTokensSet.add(#PHYSNOT_SYM); //  ~
        #    operatorTokensSet.add(#SHIFTR_SYM); //  >>
        #    operatorTokensSet.add(#SHIFTL_SYM); //  <<
        #    operatorTokensSet.add(#LIKE_SYM);   //  like
        #
        #    operatorTokensSet.add(#PERIOD_SYM);     //  .
        #    operatorTokensSet.add(#DBLCOLON_SYM);   //  ::
        #
        #    keywordTokensSet = new Set(Types::Integer);
        #
        #    keywordTokensSet.add(#ABSTRACT_SYM);
        #    keywordTokensSet.add(#ANY_TYPE_SYM);
        #    keywordTokensSet.add(#ASCEND_SYM);
        #    keywordTokensSet.add(#AVG_SYM);
        #    keywordTokensSet.add(#BP_SYM);
        #    keywordTokensSet.add(#BREAK_SYM);
        #    keywordTokensSet.add(#BY_SYM);
        #    keywordTokensSet.add(#CASE_SYM);
        #    keywordTokensSet.add(#CATCH_SYM);
        #    keywordTokensSet.add(#CHANGECOMP_SYM);
        #    keywordTokensSet.add(#CHANGESITE_SYM);
        #    keywordTokensSet.add(#CLASS_SYM);
        #    keywordTokensSet.add(#CLIENT_SYM);
        #    keywordTokensSet.add(#CNT_SYM);
        #    keywordTokensSet.add(#CONTINUE_SYM);
        #    keywordTokensSet.add(#CROSSCOMPANY_SYM);
        #    keywordTokensSet.add(#DATE_TYPE_SYM);
        #    keywordTokensSet.add(#DBL_TYPE_SYM);
        #    keywordTokensSet.add(#DEFAULT_SYM);
        #    keywordTokensSet.add(#DELETE_SYM);
        #    keywordTokensSet.add(#DESCEND_SYM);
        #    keywordTokensSet.add(#DISPLAY_SYM);
        #    keywordTokensSet.add(#DO_SYM);
        #    keywordTokensSet.add(#EDIT_SYM);
        #    keywordTokensSet.add(#ELSE_SYM);
        #    keywordTokensSet.add(#EXISTS_SYM);
        #    keywordTokensSet.add(#EXTENDS_SYM);
        #//    keywordTokensSet.add(#FALSE_SYM);
        #    keywordTokensSet.add(#FINAL_SYM);
        #    keywordTokensSet.add(#FIRSTFAST_SYM);
        #    keywordTokensSet.add(#FIRSTONLY_SYM);
        #    keywordTokensSet.add(#FIRSTONLY1_SYM);
        #    keywordTokensSet.add(#FIRSTONLY10_SYM);
        #    keywordTokensSet.add(#FIRSTONLY100_SYM);
        #    keywordTokensSet.add(#FIRSTONLY1000_SYM);
        #    keywordTokensSet.add(#FLUSH_SYM);
        #    keywordTokensSet.add(#FOR_SYM);
        #    keywordTokensSet.add(#FORCE_LITERALS_SYM);
        #    keywordTokensSet.add(#FORCE_NESTED_LOOP_SYM);
        #    keywordTokensSet.add(#FORCE_PLACEHOLDERS_SYM);
        #    keywordTokensSet.add(#FORCE_SELECT_ORDER_SYM);
        #    keywordTokensSet.add(#FORUPDATE_SYM);
        #    keywordTokensSet.add(#FROM_SYM);
        #    keywordTokensSet.add(#GROUP_SYM);
        #    keywordTokensSet.add(#GUID_TYPE_SYM);
        #    keywordTokensSet.add(#HINT_SYM);
        #    keywordTokensSet.add(#IF_SYM);
        #    keywordTokensSet.add(#IMPLEMENTS_SYM);
        #    keywordTokensSet.add(#INDEX_SYM);
        #    keywordTokensSet.add(#INSERT_SYM);
        #    keywordTokensSet.add(#INT_TYPE_SYM);
        #    keywordTokensSet.add(#INT64_TYPE_SYM);
        #    keywordTokensSet.add(#INTDIV_SYM);
        #    keywordTokensSet.add(#INTERFACE_SYM);
        #    keywordTokensSet.add(#JOIN_SYM);
        #    keywordTokensSet.add(#LIKE_SYM);
        #    keywordTokensSet.add(#MAXOF_SYM);
        #    keywordTokensSet.add(#MINOF_SYM);
        #    keywordTokensSet.add(#MOD_SYM);
        #    keywordTokensSet.add(#NEW_SYM);
        #    keywordTokensSet.add(#NEXT_SYM);
        #    keywordTokensSet.add(#NOFETCH_SYM);
        #    keywordTokensSet.add(#NOTEXISTS_SYM);
        #    keywordTokensSet.add(#NULL_SYM);
        #    keywordTokensSet.add(#ORDER_SYM);
        #    keywordTokensSet.add(#OUTER_SYM);
        #    keywordTokensSet.add(#PAUSE_SYM);
        #    keywordTokensSet.add(#PRINT_SYM);
        #    keywordTokensSet.add(#PRIVATE_SYM);
        #    keywordTokensSet.add(#PROTECTED_SYM);
        #    keywordTokensSet.add(#PUBLIC_SYM);
        #    keywordTokensSet.add(#QUEUE_TYPE_SYM);
        #    keywordTokensSet.add(#RETRY_SYM);
        #    keywordTokensSet.add(#RETURN_SYM);
        #    keywordTokensSet.add(#REVERSE_SYM);
        #    keywordTokensSet.add(#SEARCH_SYM);
        #    keywordTokensSet.add(#SERVER_SYM);
        #    keywordTokensSet.add(#SET_SYM);
        #    keywordTokensSet.add(#STATIC_SYM);
        #    keywordTokensSet.add(#STR_TYPE_SYM);
        #    keywordTokensSet.add(#SUM_SYM);
        #    keywordTokensSet.add(#SUPER_SYM);
        #    keywordTokensSet.add(#SWITCH_SYM);
        #    keywordTokensSet.add(#TABLELOCK_SYM);
        #    keywordTokensSet.add(#THROW_SYM);
        #//    keywordTokensSet.add(#TRUE_SYM);
        #    keywordTokensSet.add(#TRY_SYM);
        #    keywordTokensSet.add(#TTSABORT_SYM);
        #    keywordTokensSet.add(#TTSBEGIN_SYM);
        #    keywordTokensSet.add(#TTSEND_SYM);
        #    keywordTokensSet.add(#UPDATE_SYM);
        #    keywordTokensSet.add(#UNCHECKED_SYM);
        #    keywordTokensSet.add(#UTCDATETIME_TYPE_SYM);
        #    keywordTokensSet.add(#VOID_TYPE_SYM);
        #    keywordTokensSet.add(#VALIDTIMESTATE_SYM);
        #    keywordTokensSet.add(#WHERE_SYM);
        #    keywordTokensSet.add(#WHILE_SYM);
        #    keywordTokensSet.add(#WINDOW_SYM);
        #
        #    embeddedTokensSet = new Set(Types::Integer);
        #
        #    embeddedTokensSet.add(#ABS_FUNC);
        #    embeddedTokensSet.add(#ACOS_FUNC);
        #    embeddedTokensSet.add(#ANSI2ASCII_FUNC);
        #    embeddedTokensSet.add(#ANYTODATE_FUNC);
        #    embeddedTokensSet.add(#ANYTOENUM_FUNC);
        #    embeddedTokensSet.add(#ANYTOINT_FUNC);
        #    embeddedTokensSet.add(#ANYTOREAL_FUNC);
        #    embeddedTokensSet.add(#ANYTOSTR_FUNC);
        #    embeddedTokensSet.add(#ASCII2ANSI_FUNC);
        #    embeddedTokensSet.add(#ASIN_FUNC);
        #    embeddedTokensSet.add(#ATAN_FUNC);
        #    embeddedTokensSet.add(#BEEP_FUNC);
        #    embeddedTokensSet.add(#CHAR2NUM_FUNC);
        #    embeddedTokensSet.add(#CHARONLY_FUNC);
        #    embeddedTokensSet.add(#CLASSGET_FUNC);
        #    embeddedTokensSet.add(#CORRFLAGGET_FUNC);
        #    embeddedTokensSet.add(#CORRFLAGSET_FUNC);
        #    embeddedTokensSet.add(#COS_FUNC);
        #    embeddedTokensSet.add(#COSH_FUNC);
        #    embeddedTokensSet.add(#CTERM_FUNC);
        #    embeddedTokensSet.add(#CUREXT_FUNC);
        #    embeddedTokensSet.add(#CURUSRID_FUNC);
        #    embeddedTokensSet.add(#DATE2NUM_FUNC);
        #    embeddedTokensSet.add(#DATE2STR_FUNC);
        #    embeddedTokensSet.add(#DAYNAME_FUNC);
        #    embeddedTokensSet.add(#DAYOFMTH_FUNC);
        #    embeddedTokensSet.add(#DAYOFWK_FUNC);
        #    embeddedTokensSet.add(#DAYOFYR_FUNC);
        #    embeddedTokensSet.add(#DDB_FUNC);
        #    embeddedTokensSet.add(#DECROUND_FUNC);
        #    embeddedTokensSet.add(#DELLSPC_FUNC);
        #    embeddedTokensSet.add(#DELRSPC_FUNC);
        #    embeddedTokensSet.add(#DELSTR_FUNC);
        #    embeddedTokensSet.add(#DG_FUNC);
        #    embeddedTokensSet.add(#DIMOF_FUNC);
        #    embeddedTokensSet.add(#ENDMTH_FUNC);
        #    embeddedTokensSet.add(#ENUM2STR_FUNC);
        #    embeddedTokensSet.add(#EXP_FUNC);
        #    embeddedTokensSet.add(#EXP10_FUNC);
        #    embeddedTokensSet.add(#FLDID2NAM_FUNC);
        #    embeddedTokensSet.add(#FLDID2PNAM_FUNC);
        #    embeddedTokensSet.add(#FLDNAM2ID_FUNC);
        #    embeddedTokensSet.add(#FRAC_FUNC);
        #    embeddedTokensSet.add(#FUNC_HDR);
        #    embeddedTokensSet.add(#FUNC_ID);
        #    embeddedTokensSet.add(#FUNCGROUPID_INTRI);
        #    embeddedTokensSet.add(#FUNCMODULEID_INTRI);
        #    embeddedTokensSet.add(#FUNCNAME_FUNC);
        #    embeddedTokensSet.add(#FV_FUNC);
        #    embeddedTokensSet.add(#GETPREFIX_FUNC);
        #    embeddedTokensSet.add(#IDG_FUNC);
        #    embeddedTokensSet.add(#IDXID2NAM_FUNC);
        #    embeddedTokensSet.add(#IDXNAM2ID_FUNC);
        #    embeddedTokensSet.add(#INSSTR_FUNC);
        #    embeddedTokensSet.add(#INT2STR_FUNC);
        #    embeddedTokensSet.add(#INTVMAX_FUNC);
        #    embeddedTokensSet.add(#INTVNAME_FUNC);
        #    embeddedTokensSet.add(#INTVNO_FUNC);
        #    embeddedTokensSet.add(#INTVNORM_FUNC);
        #    embeddedTokensSet.add(#LOG10_FUNC);
        #    embeddedTokensSet.add(#LOGN_FUNC);
        #    embeddedTokensSet.add(#MATCH_FUNC);
        #    embeddedTokensSet.add(#MAX_FUNC);
        #    embeddedTokensSet.add(#MIN_FUNC);
        #    embeddedTokensSet.add(#MKDATE_FUNC);
        #    embeddedTokensSet.add(#MTHNAME_FUNC);
        #    embeddedTokensSet.add(#MTHOFYR_FUNC);
        #    embeddedTokensSet.add(#NEXTMTH_FUNC);
        #    embeddedTokensSet.add(#NEXTQTR_FUNC);
        #    embeddedTokensSet.add(#NEXTYR_FUNC);
        #    embeddedTokensSet.add(#NUM2CHAR_FUNC);
        #    embeddedTokensSet.add(#NUM2DATE_FUNC);
        #    embeddedTokensSet.add(#NUM2STR_FUNC);
        #    embeddedTokensSet.add(#PMT_FUNC);
        #    embeddedTokensSet.add(#POWER_FUNC);
        #    embeddedTokensSet.add(#PREFIX_FUNC);
        #    embeddedTokensSet.add(#PREVMTH_FUNC);
        #    embeddedTokensSet.add(#PREVQTR_FUNC);
        #    embeddedTokensSet.add(#PREVYR_FUNC);
        #    embeddedTokensSet.add(#PRIMO_FUNC);
        #    embeddedTokensSet.add(#PRMISDEFAULT_FUNC);
        #    embeddedTokensSet.add(#PT_FUNC);
        #    embeddedTokensSet.add(#PV_FUNC);
        #    embeddedTokensSet.add(#QDEL_FUNC);
        #    embeddedTokensSet.add(#QFIND_FUNC);
        #    embeddedTokensSet.add(#QINS_FUNC);
        #    embeddedTokensSet.add(#QLEN_FUNC);
        #    embeddedTokensSet.add(#QNULL_FUNC);
        #    embeddedTokensSet.add(#QPEEK_FUNC);
        #    embeddedTokensSet.add(#QPOKE_FUNC);
        #    embeddedTokensSet.add(#RATE_FUNC);
        #    embeddedTokensSet.add(#REFPRINTALL_FUNC);
        #    embeddedTokensSet.add(#REMOVE_FUNC);
        #    embeddedTokensSet.add(#ROUND_FUNC);
        #    embeddedTokensSet.add(#RUNAS_FUNC);
        #    embeddedTokensSet.add(#SESSIONID_FUNC);
        #    embeddedTokensSet.add(#SIN_FUNC);
        #    embeddedTokensSet.add(#SINH_FUNC);
        #    embeddedTokensSet.add(#SLEEP_FUNC);
        #    embeddedTokensSet.add(#SLN_FUNC);
        #    embeddedTokensSet.add(#STR2DATE_FUNC);
        #    embeddedTokensSet.add(#STR2ENUM_FUNC);
        #    embeddedTokensSet.add(#STR2INT_FUNC);
        #    embeddedTokensSet.add(#STR2NUM_FUNC);
        #    embeddedTokensSet.add(#STR2TIME_FUNC);
        #    embeddedTokensSet.add(#STRCMP_FUNC);
        #    embeddedTokensSet.add(#STRCOLSEQ_FUNC);
        #    embeddedTokensSet.add(#STRFIND_FUNC);
        #    embeddedTokensSet.add(#STRFMT_FUNC);
        #    embeddedTokensSet.add(#STRKEEP_FUNC);
        #    embeddedTokensSet.add(#STRLEN_FUNC);
        #    embeddedTokensSet.add(#STRLINE_FUNC);
        #    embeddedTokensSet.add(#STRLWR_FUNC);
        #    embeddedTokensSet.add(#STRNFIND_FUNC);
        #    embeddedTokensSet.add(#STRPOKE_FUNC);
        #    embeddedTokensSet.add(#STRPROMPT_FUNC);
        #    embeddedTokensSet.add(#STRREP_FUNC);
        #    embeddedTokensSet.add(#STRSCAN_FUNC);
        #    embeddedTokensSet.add(#STRUPR_FUNC);
        #    embeddedTokensSet.add(#SUBSTR_FUNC);
        #    embeddedTokensSet.add(#SYD_FUNC);
        #    embeddedTokensSet.add(#SYSTEMDATEGET_FUNC);
        #    embeddedTokensSet.add(#SYSTEMDATESET_FUNC);
        #    embeddedTokensSet.add(#TABID2NAM_FUNC);
        #    embeddedTokensSet.add(#TABID2PNAM_FUNC);
        #    embeddedTokensSet.add(#TABNAM2ID_FUNC);
        #    embeddedTokensSet.add(#TAN_FUNC);
        #    embeddedTokensSet.add(#TANH_FUNC);
        #    embeddedTokensSet.add(#TERM_FUNC);
        #    embeddedTokensSet.add(#TIME2STR_FUNC);
        #    embeddedTokensSet.add(#TIMENOW_FUNC);
        #    embeddedTokensSet.add(#TODAY_FUNC);
        #    embeddedTokensSet.add(#TRUNC_FUNC);
        #    embeddedTokensSet.add(#TYPEOF_FUNC);
        #    embeddedTokensSet.add(#UINT2STR_FUNC);
        #    embeddedTokensSet.add(#ULTIMO_FUNC);
        #    embeddedTokensSet.add(#WKOFYR_FUNC);
        #    embeddedTokensSet.add(#YEAR_FUNC);
        #    embeddedTokensSet.add(#CLASSNUM_INTRI);
        #    embeddedTokensSet.add(#CLASSSTR_INTRI);
        #    embeddedTokensSet.add(#CNTFLD_INTRI);
        #    embeddedTokensSet.add(#CONFIGURATIONKEYNUM_INTRI);
        #    embeddedTokensSet.add(#CONFIGURATIONKEYSTR_INTRI);
        #    embeddedTokensSet.add(#ENUMCNT_INTRI);
        #    embeddedTokensSet.add(#ENUMNUM_INTRI);
        #    embeddedTokensSet.add(#ENUMSTR_INTRI);
        #    embeddedTokensSet.add(#EXTENDEDTYPENUM_INTRI);
        #    embeddedTokensSet.add(#EXTENDEDTYPESTR_INTRI);
        #    embeddedTokensSet.add(#FIELDNUM_INTRI);
        #    embeddedTokensSet.add(#FIELDSTR_INTRI);
        #    embeddedTokensSet.add(#FLDPNAM_INTRI);
        #    embeddedTokensSet.add(#FORMSTR_INTRI);
        #    embeddedTokensSet.add(#HELPAPPLSTR_INTRI);
        #    embeddedTokensSet.add(#HELPDEVSTR_INTRI);
        #    embeddedTokensSet.add(#HTMLPDAHORIZONTALPAGESTR_INTRI);
        #    embeddedTokensSet.add(#HTMLPDAVERTICALPAGESTR_INTRI);
        #    embeddedTokensSet.add(#HTMLSTANDARDPAGESTR_INTRI);
        #    embeddedTokensSet.add(#IDENTSTR_INTRI);
        #    embeddedTokensSet.add(#INDEXNUM_INTRI);
        #    embeddedTokensSet.add(#INDEXSTR_INTRI);
        #    embeddedTokensSet.add(#INTRI_ID);
        #    embeddedTokensSet.add(#LICENSECODENUM_INTRI);
        #    embeddedTokensSet.add(#LICENSECODESTR_INTRI);
        #    embeddedTokensSet.add(#LITERALSTR_INTRI);
        #    embeddedTokensSet.add(#MAXDATE_INTRI);
        #    embeddedTokensSet.add(#MAXINT_INTRI);
        #    embeddedTokensSet.add(#MENUITEMACTIONSTR_INTRI);
        #    embeddedTokensSet.add(#MENUITEMDISPLAYSTR_INTRI);
        #    embeddedTokensSet.add(#MENUITEMOUTPUTSTR_INTRI);
        #    embeddedTokensSet.add(#MENUSTR_INTRI);
        #    embeddedTokensSet.add(#METHODSTR_INTRI);
        #    embeddedTokensSet.add(#MININT_INTRI);
        #    embeddedTokensSet.add(#QUERYSTR_INTRI);
        #    embeddedTokensSet.add(#REPORTSTR_INTRI);
        #    embeddedTokensSet.add(#RESOURCESTR_INTRI);
        #    embeddedTokensSet.add(#SECURITYKEYNUM_INTRI);
        #    embeddedTokensSet.add(#SECURITYKEYSTR_INTRI);
        #    embeddedTokensSet.add(#STATICMETHODSTR_INTRI);
        #    embeddedTokensSet.add(#TABLECOLLECTIONSTR_INTRI);
        #    embeddedTokensSet.add(#TABLEFIELDGROUPSTR_INTRI);
        #    embeddedTokensSet.add(#TABLEMETHODSTR_INTRI);
        #    embeddedTokensSet.add(#TABLENUM_INTRI);
        #    embeddedTokensSet.add(#TABLESTATICMETHODSTR_INTRI);
        #    embeddedTokensSet.add(#TABLESTR_INTRI);
        #    embeddedTokensSet.add(#TABPNAM_INTRI);
        #    embeddedTokensSet.add(#USERTYPE_INTRI);
        #    embeddedTokensSet.add(#VARSTR_INTRI);
        #    embeddedTokensSet.add(#WEBACTIONITEMSTR_INTRI);
        #    embeddedTokensSet.add(#WEBDISPLAYCONTENTITEMSTR_INTRI);
        #    embeddedTokensSet.add(#WEBFORMSTR_INTRI);
        #    embeddedTokensSet.add(#WEBLETITEMSTR_INTRI);
        #    embeddedTokensSet.add(#WEBMENUSTR_INTRI);
        #    embeddedTokensSet.add(#WEBOUTPUTCONTENTITEMSTR_INTRI);
        #    embeddedTokensSet.add(#WEBPAGEDEFSTR_INTRI);
        #    embeddedTokensSet.add(#WEBREPORTSTR_INTRI);
        #    embeddedTokensSet.add(#WEBSITEDEFSTR_INTRI);
        #    embeddedTokensSet.add(#WEBSITETEMPSTR_INTRI);
        #    embeddedTokensSet.add(#WEBSTATICFILESTR_INTRI);
        #    embeddedTokensSet.add(#WEBURLITEMSTR_INTRI);
        #    embeddedTokensSet.add(#WEBWEBPARTSTR_INTRI);
        #}
      ENDSOURCE
      SOURCE #createSQLDatabaseAndTable
        #private void createSQLDatabaseAndTable()
        #{
        #    /*
        #CREATE DATABASE [XppML]
        # CONTAINMENT = NONE
        # ON  PRIMARY
        #( NAME = N'XppML', FILENAME = N'C:\Databases\XppML.mdf' , SIZE = 10240KB , MAXSIZE = UNLIMITED, FILEGROWTH = 10240KB )
        # LOG ON
        #( NAME = N'XppML_log', FILENAME = N'C:\Databases\XppML.ldf' , SIZE = 10240KB , MAXSIZE = 1048576KB , FILEGROWTH = 10240KB )
        #GO
        #
        #ALTER DATABASE [XppML] SET RECOVERY SIMPLE
        #GO
        #SET ANSI_NULLS ON
        #GO
        #SET QUOTED_IDENTIFIER ON
        #GO
        #
        #CREATE TABLE [XppML].[dbo].[MARKUP](
        #    [SOURCE] [xml] NOT NULL,
        #    [XREFPATHSREF] [bigint] NOT NULL,
        # CONSTRAINT [XppML_XREFPATHSREF_IDX] PRIMARY KEY CLUSTERED
        #(
        #    [XREFPATHSREF] ASC
        #)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
        #) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
        #
        #GO
        #
        #ALTER TABLE [XppML].[dbo].[MARKUP]  WITH CHECK ADD CHECK  (([XREFPATHSREF]<>(0)))
        #GO
        #
        #CREATE PRIMARY XML INDEX [SOURCE_IDX] ON [XPPML].[dbo].[MARKUP]
        #(    [SOURCE]  )
        #WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
        #GO
        #    */
        #}
      ENDSOURCE
      SOURCE #fetchNextSym
        #private boolean fetchNextSym(boolean _concat = false,str _stopOn = '')
        #{
        #    int     symTmp;
        #    str     symStrTmp;
        #    int     symLineTmp;
        #    int     symColTmp;
        #
        #    nextSym = conNull();
        #
        #    symTmp = scannerClass.nextSymbol();
        #    symStrTmp = scannerClass.string();
        #    symLineTmp = scannerClass.line()-objectDeclarationLines;
        #    symColTmp  = scannerClass.startColumn();
        #
        #    if(     _stopOn
        #        &&  strFind(symStrTmp,_stopOn,1,strLen(symStrTmp))
        #        )
        #    {
        #        nextSym = [ symTmp,symStrTmp,symLineTmp,symColTmp ];
        #        return false;
        #    }
        #
        #    if(_concat)
        #    {
        #        symStr += symStrTmp;
        #    }
        #    else
        #    {
        #        symStr = symStrTmp;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fixMacroLabels
        #private void fixMacroLabels()
        #{
        #    xRefTmpReferences   tmpRef;
        #
        #    tmpRef.setTmpData(xRefReferences);
        #
        #    while
        #        select  xRefReferences
        #        where   xRefReferences.Kind     == xRefKind::Label
        #            &&  xRefReferences.Reference== XRefReference::Read
        #        exists join tmpRef
        #        where   tmpRef.line             == xRefReferences.line
        #            &&  tmpRef.Column           == XRefReferences.Column-1
        #    {
        #        xRefReferences.Column -= 1;
        #        xRefReferences.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #getCbr
        #private int getCbr(XmlElement _xmlElement = curr)
        #{
        #    if(!_xmlElement.hasAttribute('cbr'))
        #    {
        #        return 0;
        #    }
        #    return str2int(_xmlElement.getAttribute('cbr'));
        #}
      ENDSOURCE
      SOURCE #getPar
        #private int getPar()
        #{
        #    if(!curr.hasAttribute('par'))
        #    {
        #        return 0;
        #    }
        #    return str2int(curr.getAttribute('par'));
        #}
      ENDSOURCE
      SOURCE #merge
        #private void merge()
        #{
        #    str mergeStmt = strFmt(@'
        #MERGE INTO %1 AS T
        #USING ( SELECT XREFPATHRECID,SOURCE FROM [tempdb].[dbo].%2) AS S (XPATHRECID,SOURCE)
        #  ON (T.XREFPATHSREF = S.XPATHRECID)
        #  WHEN MATCHED THEN
        #    UPDATE SET T.SOURCE = S.SOURCE
        #  WHEN NOT MATCHED THEN
        #    INSERT (XREFPATHSREF,SOURCE)
        #    VALUES (S.XPATHRECID,S.SOURCE);'
        #    ,   parameters.SQLTableFullName
        #    ,   sourceUpdate.getPhysicalTableName());
        #
        #    XppMLSourceMarkup::executeSQLUpdate(mergeStmt);
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    super();
        #
        #    this.createSets();
        #
        #    parameters = XppMLParameters::find();
        #
        #    this.setPrintable();
        #}
      ENDSOURCE
      SOURCE #newObjectTreeNode
        #public boolean newObjectTreeNode(TreeNode _objectTreeNode)
        #{
        #    xRefUpdateTmpReferences xRefUpdateTmpReferences;
        #    objectTreeNode  = _objectTreeNode;
        #    objectType      = _objectTreeNode.utilElement().recordType;
        #
        #    switch(objectType)
        #    {
        #        case    UtilElementType::Form:
        #            if(this.objectOnServer())
        #            {
        #                warning(strFmt("@PML56",objectTreeNode.treeNodePath()));
        #                return false;
        #            }
        #            //fallthrough
        #        case    UtilElementType::Class:
        #        case    UtilElementType::DataSet:
        #        case    UtilElementType::Query:
        #            declarationDone = false;
        #            break;
        #        case    UtilElementType::Table:
        #        case    UtilElementType::TableMap:
        #        case    UtilElementType::ViewQuery:
        #            declarationDone = true;
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    objectTreeNode.AOTrestore();
        #
        #    objectPath = objectTreeNode.treeNodePath();
        #
        #    xRefPathsMap = this.xRefPathsMap();
        #
        #    xRefReferences = null;
        #
        #    objectSuperClassName = '';
        #    objectSuperSet = new Set(Types::String);
        #
        #    objectDeclaration = '';
        #    objectDeclarationLines = 0;
        #
        #    xRefUpdateTmpReferences = new xRefUpdateTmpReferences();
        #    xRefUpdateTmpReferences.parmFull(true);
        #    xRefUpdateTmpReferences.fillTmpxRefReferences(objectTreeNode);
        #    xRefReferences = xRefUpdateTmpReferences.allTmpxRefReferences();
        #    xRefUpdateTmpReferences = null;
        #
        #    objectSuperClassName = '';
        #    objectSuperSet = new Set(Types::String);
        #
        #    objectDeclaration = '';
        #    objectDeclarationLines = 0;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #open
        #private XmlElement open(
        #        str _tag
        #    ,   str _sep = ''
        #    )
        #{
        #    if(     cbr
        #        &&  !stmt
        #        &&  _tag != 'bl'
        #        &&  _tag != 'st'
        #        )
        #    {
        #        stmt = this.open('st');
        #    }
        #
        #    curr = curr.appendChild(xmlDoc.createElement(_tag));
        #    if(_sep)
        #    {
        #        curr.setAttribute('sep',_sep);
        #    }
        #
        #    if(par)
        #    {
        #        curr.setAttribute('par',int2str(par));
        #    }
        #    if(cbr)
        #    {
        #        curr.setAttribute('cbr',int2str(cbr));
        #    }
        #    if(debug)
        #    {
        #        xmlDoc.save(debugDump);
        #    }
        #    return curr;
        #}
      ENDSOURCE
      SOURCE #openVarOrIntr
        #private void openVarOrIntr(IdentifierName _typeName,xRefKind _kind)
        #{
        #    switch(_kind)
        #    {
        #        case    xRefKind::Table:
        #        case    xRefKind::Map:
        #            this.open('var');
        #            curr.setAttribute('domain','table');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::TableField:
        #        case    xRefKind::MapField:
        #            this.open('field');
        #            curr.setAttribute('table',_typeName);
        #            break;
        #        case    xRefKind::Class:
        #        case    xRefKind::Form:
        #            this.open('var');
        #            curr.setAttribute('domain','class');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::ExtendedType:
        #            this.open('var');
        #            curr.setAttribute('domain',_typeName ? 'edt' : 'any');
        #            curr.setAttribute('type',_typeName ? _typeName : 'anytype');
        #            break;
        #        case    xRefKind::Enum:
        #            this.open('var');
        #            curr.setAttribute('domain','enum');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::Enumerator:
        #            this.open('enum');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::BasicType:
        #            this.open('var');
        #            curr.setAttribute('domain','basic');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::ClrType:
        #            this.open('var');
        #            curr.setAttribute('domain','clr');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::ClrTypeMethod:
        #            this.open('method');
        #            curr.setAttribute('domain','clr');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::ClassInstanceMethod:
        #        case    xRefKind::ClassStaticMethod:
        #            this.open('method');
        #            curr.setAttribute('domain','class');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::TableInstanceMethod:
        #        case    xRefKind::TableStaticMethod:
        #        case    xRefKind::MapInstanceMethod:
        #        case    xRefKind::MapStaticMethod:
        #            this.open('method');
        #            curr.setAttribute('domain','table');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        case    xRefKind::TableIndex:
        #            this.open('index');
        #            curr.setAttribute('domain','table');
        #            curr.setAttribute('type',_typeName);
        #            break;
        #        default:
        #            this.open('intr');
        #            curr.setAttribute('domain',strlwr(enum2str(_kind)));
        #            curr.setAttribute('type',_typeName);
        #            break;
        #    }
        #}
        #
        #/*
        #    switch(_kind)
        #    {
        #        case    xRefKind::Nil:
        #        case    xRefKind::Table:
        #        case    xRefKind::Map:
        #        case    xRefKind::MapField:
        #        case    xRefKind::TableIndex:
        #        case    xRefKind::Class:
        #        case    xRefKind::LocalMethod:
        #        case    xRefKind::ExtendedType:
        #        case    xRefKind::Enum:
        #        case    xRefKind::Enumerator:
        #        case    xRefKind::BasicType:
        #        case    xRefKind::Label:
        #        case    xRefKind::Predefined:
        #        case    xRefKind::SecurityKey:
        #        case    xRefKind::ConfigurationKey:
        #        case    xRefKind::LicenseCode:
        #        case    xRefKind::WebUrlItem:
        #        case    xRefKind::WebActionItem:
        #        case    xRefKind::WebDisplayContentItem:
        #        case    xRefKind::WebOutputContentItem:
        #        case    xRefKind::ClrType:
        #        case    xRefKind::ClrTypeMethod:
        #        case    xRefKind::Form:
        #        case    xRefKind::WebForm:
        #        case    xRefKind::Report:
        #        case    xRefKind::Query:
        #        case    xRefKind::Job:
        #        case    xRefKind::Menu:
        #        case    xRefKind::WebMenu:
        #        case    xRefKind::WebModule:
        #        case    xRefKind::DataSet:
        #        case    xRefKind::WebManagedContentItem:
        #        case    xRefKind::WebControl:
        #        case    xRefKind::WebPageDef:
        #        case    xRefKind::WebStaticFile:
        #        case    xRefKind::Service:
        #        case    xRefKind::Cue:
        #        case    xRefKind::CueGroup:
        #        case    xRefKind::FormMethod:
        #        case    xRefKind::DataSetMethod:
        #        case    xRefKind::InfoPart:
        #        case    xRefKind::FormPart:
        #        case    xRefKind::VisualStudioProject:
        #        case    xRefKind::VsProjectAxModeling:
        #        case    xRefKind::VsProjectCsharp:
        #        case    xRefKind::VsProjectVisualBasic:
        #        case    xRefKind::VsProjectWebApplication:
        #        case    xRefKind::VsProjectAnalysisServices:
        #        case    xRefKind::SSRSReport:
        #        case    xRefKind::SSRSReportLayoutTemplate:
        #        case    xRefKind::SSRSReportTableStyleTemplate:
        #        case    xRefKind::SSRSReportListStyleTemplate:
        #        case    xRefKind::SSRSReportMatrixStyleTemplate:
        #        case    xRefKind::SSRSReportPieChartStyleTemplate:
        #        case    xRefKind::SSRSReportXYChartStyleTemplate:
        #        case    xRefKind::SSRSReportDataSource:
        #        case    xRefKind::ServiceGroup:
        #        case    xRefKind::CodePermission:
        #        case    xRefKind::Privilege:
        #        case    xRefKind::Duty:
        #        case    xRefKind::Role:
        #        case    xRefKind::ProcessCycle:
        #        case    xRefKind::Policy:
        #        case    xRefKind::TableFullTextIndex:
        #*/
      ENDSOURCE
      SOURCE #parmDebug
        #public boolean parmDebug(boolean _debug = debug, Filename _debugFile = '')
        #{
        #    #File
        #    FileIOPermission    debugDumpFilePermission;
        #
        #    if(!prmIsDefault(_debug))
        #    {
        #        debug = _debug;
        #    }
        #
        #    if(_debugFile)
        #    {
        #        debugDump = _debugFile;
        #        debugDumpFilePermission = new FileIOPermission(debugDump ,#IO_WRITE);
        #        debugDumpFilePermission.assert();
        #    }
        #    return debug;
        #}
      ENDSOURCE
      SOURCE #parmTreeNode
        #public void parmTreeNode(TreeNode _objectTreeNode)
        #{
        #    xRefUpdateTmpReferences xRefUpdateTmpReferences;
        #
        #    objectTreeNode  = _objectTreeNode;
        #    objectType      = objectTreeNode.utilElement().recordType;
        #
        #    if(     objectType == UtilElementType::Form
        #        &&  this.objectOnServer()
        #        )
        #    {
        #        warning(strFmt("@PML56",objectTreeNode.treeNodePath()));
        #        return;
        #    }
        #
        #    objectTreeNode.AOTrestore();
        #
        #    objectPath = objectTreeNode.treeNodePath();
        #
        #    xRefPathsMap = this.xRefPathsMap();
        #
        #    xRefReferences = null;
        #
        #    objectSuperClassName = '';
        #    objectSuperSet = new Set(Types::String);
        #
        #    objectDeclaration = '';
        #    objectDeclarationLines = 0;
        #
        #    xRefUpdateTmpReferences = new xRefUpdateTmpReferences();
        #    xRefUpdateTmpReferences.parmFull(true);
        #    xRefUpdateTmpReferences.fillTmpxRefReferences(objectTreeNode,false);
        #    xRefReferences = xRefUpdateTmpReferences.allTmpxRefReferences();
        #    xRefUpdateTmpReferences = null;
        #}
      ENDSOURCE
      SOURCE #parmXppMLProcessProject
        #public XppMLProcessProject parmXppMLProcessProject(XppMLProcessProject _xppMLProcessProject = xppMLProcessProject)
        #{
        #    if(!prmIsDefault(_xppMLProcessProject))
        #    {
        #        xppMLProcessProject = _xppMLProcessProject;
        #    }
        #    return xppMLProcessProject;
        #}
      ENDSOURCE
      SOURCE #postSym
        #private void postSym()
        #{
        #    XmlElement  element;
        #
        #    switch(sym)
        #    {
        #        case    #LEFTBR_SYM:    //{
        #            cbr += 1;
        #            if(curr.selectSingleNode(strFmt('kw[.="%1"]',literalStr(switch))))
        #            {
        #                this.open('bl','case');
        #            }
        #            else
        #            {
        #                this.open('bl',';');
        #            }
        #            stmt = null;
        #            break;
        #        case    #RIGHTBR_SYM:   //}
        #            cbr -= 1;
        #            if(     curr.nodeType() == XmlNodeType::Element
        #                &&  curr.tagName() == 'st'
        #                )
        #            {
        #                this.closeCurr();
        #            }
        #            break;
        #        case    #SEMICOLON_SYM: //;
        #            if(inFor)
        #            {
        #                inFor += 1;
        #                switch(inFor)
        #                {
        #                    case 2:
        #                        this.open('el');
        #                        break;
        #                    case 3:
        #                        this.open('st');
        #                        break;
        #                }
        #            }
        #            break;
        #        case    #LEFT_PAR_SYM:  //(
        #            par += 1;
        #            if(lastSym == #FOR_SYM)
        #            {
        #                inFor = 1;
        #                curr.setAttribute('sep',';');
        #                postOpen = 'st';
        #                break;
        #            }
        #            else if(lastSym == #IDENTSTR_INTRI
        #                ||  lastSym == #LITERALSTR_INTRI
        #                )
        #            {
        #                quoteNext = true;
        #            }
        #            if(curr.tagName() != 'el')
        #            {
        #                if(     lastSym == #IF_SYM
        #                    ||  lastSym == #WHILE_SYM
        #                    ||  lastSym == #SWITCH_SYM
        #                    ||  lastSym == #CATCH_SYM
        #                    ||  curr.getAttribute('sep') == ','
        #                    )
        #                {
        #                    this.open('el');
        #                }
        #                else
        #                {
        #                    element = curr.selectSingleNode('ancestor::*[@sep=","]');
        #                    if(     element
        #                        &&  element.tagName() !='sql'
        #                        )
        #                    {
        #                        this.open('el');
        #                    }
        #                }
        #            }
        #            break;
        #        case    #LEFT_BRKT_SYM: //[
        #            par += 1;
        #            break;
        #        case    #LIST_SEP_SYM:  //,
        #            if(curr.getAttribute('sep') == ',')
        #            {
        #                if(     curr.tagName() == 'call'
        #                    ||  curr.tagName() == 'arr'
        #                    ||  curr.tagName() == 'attr'
        #                    ||  curr.tagName() == 'con'
        #                    ||  curr.tagName() == 'st'
        #                    ||  curr.tagName() == 'def'
        #                    ||  (   curr.tagName() == 'bl'
        #                        &&  curr.selectSingleNode(strFmt('kw[.="%1"]',literalStr(case)))
        #                        )
        #                    )
        #                {
        #                    this.open('el');
        #                }
        #                else
        #                {
        #                    minInt();
        #                }
        #            }
        #            break;
        #        case    #RGHT_PAR_SYM:  //)
        #            if(     inFor == 3
        #                &&  par == 0)
        #            {
        #                inFor = 0;
        #                curr.removeAttribute('sep');
        #            }
        #            break;
        #        case    #ASG_SYM:       //=
        #        case    #ASGINC_SYM:    //+=
        #        case    #ASGDEC_SYM:    //-=
        #            this.open('el');
        #            break;
        #        case    #RETURN_SYM:    //return
        #        case    #THROW_SYM:     //throw
        #        case    #WHERE_SYM:     //where
        #        case    #CASE_SYM:      //case
        #            this.open('el');
        #            break;
        #        case    #QUEST_SYM:     //?
        #            ternary += 1;
        #            break;
        #        case    #COLON_SYM:     //:
        #            if(lastSym == #CROSSCOMPANY_SYM)
        #            {
        #                this.open('el');
        #            }
        #            else if(ternary)
        #            {
        #                ternary -= 1;
        #            }
        #            else
        #            {
        #                if(curr.selectSingleNode(strFmt('kw[.="%1" or .="%2"]',literalStr(case),literalStr(default))))
        #                {
        #                    this.open('bl',';');
        #                    this.open('st');
        #                    stmt = curr;
        #                }
        #            }
        #            break;
        #        case    #EXTENDEDTYPENUM_INTRI:
        #        case    #EXTENDEDTYPESTR_INTRI:
        #            inExtendedTypeIntr = true;
        #            break;
        #        case    #VALIDTIMESTATE_SYM:
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #preSym
        #private void preSym()
        #{
        #    switch(sym)
        #    {
        #        case    #LEFT_PAR_SYM:  //(
        #            if(     !cbr
        #                &&  curr
        #                &&  curr.nodeType()  == XmlNodeType::Element
        #                &&  curr.tagName()   == 'attr'
        #                )
        #            {
        #                curr.setAttribute('sep',',');
        #            }
        #            else if(lastSym == #PERIOD_SYM)
        #            {
        #                this.open('field',',');
        #                postOpen = 'el';
        #            }
        #            break;
        #        case    #LIST_SEP_SYM:  //,
        #            this.closeUpUntilSep(',');
        #            break;
        #        case    #RGHT_PAR_SYM:  //)
        #        case    #RGHT_BRKT_SYM: //]
        #            par -= 1;
        #            if(par < 0)
        #            {
        #                throw error(strFmt('parentheses problem (%1,%2)',symLine,symCol));
        #            }
        #            while(this.getPar() > par)
        #            {
        #                this.closeCurr();
        #            }
        #            if(     curr.nodeType() == XmlNodeType::Element
        #                &&  (   curr.tagName() == 'call'
        #                    ||  curr.tagName() == 'arr'
        #                    ||  curr.tagName() == 'con'
        #                    ||  curr.tagName() == 'attr'
        #                    )
        #                )
        #            {
        #                close = 1;
        #            }
        #            break;
        #        case    #LEFT_BRKT_SYM: //[
        #            if(curr.nodeType() == XmlNodeType::Element)
        #            {
        #                if(     curr.tagName() == 'var'
        #                    ||  curr.tagName() == 'call')
        #                {
        #                    this.open('arr',',');
        #                    postOpen = 'el';
        #                }
        #                else if(curr.tagName() == 'bl'
        #                    &&  !stmt
        #                    )
        #                {
        #                    this.open('assign');
        #                    this.open('con',',');
        #                    postOpen = 'el';
        #                }
        #                else
        #                {
        #                    this.open('con',',');
        #                    postOpen = 'el';
        #                }
        #            }
        #            break;
        #        case    #SEMICOLON_SYM: //;
        #            //inSql = false;
        #            insertRecordsetTable = '';
        #            if(inFor)
        #            {
        #                this.closeUpUntilSep(';');
        #            }
        #            else if(stmt)
        #            {
        #                this.closeUpUntilSep(';');
        #                stmt = null;
        #            }
        #            break;
        #        case    #LEFTBR_SYM:    //{
        #            if(!cbr)
        #            {
        #                this.closeUpUntilTag('source');
        #                stmt = null;
        #                break;
        #            }
        #            if(stmt)
        #            {
        #                this.closeUpUntilTag('st');
        #            }
        #            break;
        #        case    #RIGHTBR_SYM:   //}
        #            while(this.getCbr() >= cbr)
        #            {
        #                this.closeCurr();
        #            }
        #            stmt = null;
        #            break;
        #        case    #STR_SYM:
        #            this.open('val');
        #            //BP deviation documented
        #            curr.setAttribute('type',identifierStr(str));
        #            close = 1;
        #            break;
        #        case    #INT_SYM:
        #            this.open('val');
        #            //BP deviation documented
        #            curr.setAttribute('type',identifierStr(int));
        #            close = 1;
        #            break;
        #        case    #NULL_SYM:
        #            this.open('val');
        #            //BP deviation documented
        #            curr.setAttribute('type',identifierStr(class));
        #            close = 1;
        #            break;
        #        case    #TRUE_SYM:
        #        case    #FALSE_SYM:
        #            this.open('val');
        #            //BP deviation documented
        #            curr.setAttribute('type',identifierStr(boolean));
        #            close = 1;
        #            break;
        #        case    #DBL_SYM:
        #            this.open('val');
        #            //BP deviation documented
        #            curr.setAttribute('type',identifierStr(real));
        #            close = 1;
        #            break;
        #        case    #DATE_SYM:
        #            this.open('val');
        #            //BP deviation documented
        #            curr.setAttribute('type',identifierStr(date));
        #            close = 1;
        #            break;
        #        case    #INT64_SYM:
        #            this.open('val');
        #            //BP deviation documented
        #            curr.setAttribute('type',identifierStr(int64));
        #            close = 1;
        #            break;
        #        case    #COLON_SYM:
        #            if(     ternary
        #                ||  curr.tagName() == 'sql'
        #                )
        #            {
        #                break;
        #            }
        #            this.closeUpUntilTag('bl');
        #            break;
        #        case    #STR_TYPE_SYM:
        #        case    #INT_TYPE_SYM:
        #        case    #INT64_TYPE_SYM:
        #        case    #DBL_TYPE_SYM:
        #        case    #DATE_TYPE_SYM:
        #        case    #UTCDATETIME_TYPE_SYM:
        #        case    #QUEUE_TYPE_SYM:
        #        case    #GUID_TYPE_SYM:
        #        case    #ANY_TYPE_SYM:
        #            this.open('type');
        #            curr.setAttribute('domain','basic');
        #            close = 1;
        #            break;
        #        case    #INT_SYM:
        #            if(lastSym == #STR_TYPE_SYM)
        #            {
        #                curr = curr.lastChild();
        #                this.open('fixed');
        #                close = 2;
        #            }
        #    }
        #}
      ENDSOURCE
      SOURCE #preSymMain
        #private void preSymMain()
        #{
        #    switch(sym)
        #    {
        #        case    #CASE_SYM:      //case
        #        case    #DEFAULT_SYM:   //default
        #            if(     curr.tagName() == 'bl'
        #                &&  curr.getAttribute('sep') == ''
        #                &&  lastXml.isEmpty()
        #                )
        #            {
        #                this.closeCurr();
        #                curr.removeChild(curr.lastChild());
        #            }
        #            else
        #            {
        #                this.closeUpUntilSep('case');
        #                this.open('bl',',');
        #            }
        #            stmt = curr;
        #            break;
        #        case    #SEARCH_SYM:    //select
        #        case    #INSERT_SYM:    //insert_recordset
        #        case    #UPDATE_SYM:    //update_recordset
        #        case    #DELETE_SYM:    //delete_from
        #            this.open('sql',',');
        #            //inSql = true;
        #            break;
        #        case    #FROM_SYM:      //from
        #        case    #WHERE_SYM:     //where
        #        case    #OUTER_SYM:     //outer
        #        case    #EXISTS_SYM:    //exists
        #        case    #NOTEXISTS_SYM: //notexists
        #            minInt();
        #        case    #JOIN_SYM:      //join
        #            this.closeUpUntilSep(',');
        #            break;
        #        case    #VALIDTIMESTATE_SYM:    //validtimeState
        #            inValidTimeState = true;
        #            this.open('call',',');
        #            this.open('method');
        #            close = 1;
        #            break;
        #        case    #RUNBUF_EVAL:       //runbuf
        #        case    #EVALBUF_EVAL:      //eval
        #            this.open('call').setAttribute('sep',',');
        #            this.open('method');
        #            close = 1;
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #processMethods
        # private void processMethods(TreeNode _methodsTreeNode,ClassName _superClassName = '')
        #{
        #    TreeNode    methodTreeNode;
        #
        #    for(    methodTreeNode = _methodsTreeNode.AOTfirstChild()
        #        ;   methodTreeNode
        #        ;   methodTreeNode = methodTreeNode.AOTnextSibling()
        #        )
        #    {
        #        this.save(methodTreeNode,this.buildMethodMarkup(methodTreeNode,_superClassName ? _superClassName : objectSuperClassName));
        #        methodTreeNode.treeNodeRelease();
        #    }
        #}
      ENDSOURCE
      SOURCE #processTreeNode
        #public void processTreeNode(TreeNode _objectTreeNode)
        #{
        #    TreeNode    datasourceTreeNode;
        #    TreeNode    controlTreeNode;
        #
        #    if(!this.newObjectTreeNode(_objectTreeNode))
        #    {
        #        return;
        #    }
        #
        #    try
        #    {
        #        select firstOnly sourceUpdate;  //To create temp table;
        #
        #        switch(objectType)
        #        {
        #            case    UtilElementType::Class:
        #                this.processMethods(objectTreeNode);
        #                break;
        #            case    UtilElementType::Table:
        #            case    UtilElementType::TableMap:
        #                if(objectTreeNode.AOTtypeStr() == 'DBT')
        #                {
        #                    this.buildSuperTableSet();
        #                }
        #                //fall through
        #            case    UtilElementType::ViewQuery:
        #                this.processMethods(objectTreeNode.AOTfindChild('Methods'));
        #                break;
        #            case    UtilElementType::Query:
        #                this.processMethods(objectTreeNode.AOTfindChild('Methods'),classStr(ObjectRun));
        #                break;
        #            case    UtilElementType::Form:
        #            case    UtilElementType::DataSet:
        #                this.processMethods(objectTreeNode.AOTfindChild('Methods'),classStr(ObjectRun));
        #
        #                for(    datasourceTreeNode = objectTreeNode.AOTfindChild('Data Sources').AOTfirstChild()
        #                    ;   datasourceTreeNode
        #                    ;   datasourceTreeNode = datasourceTreeNode.AOTnextSibling()
        #                    )
        #                {
        #                    if(hasProperty(datasourceTreeNode.AOTgetProperties(),#PropertyTable))
        #                    {
        #                        this.processMethods(datasourceTreeNode.AOTfindChild('Methods'),classStr(FormObjectSet));
        #                        datasourceTreeNode.treeNodeRelease();
        #                    }
        #                }
        #                if(objectType == UtilElementType::Form)
        #                {
        #                    for(    controlTreeNode = objectTreeNode.AOTfindChild('Designs').AOTfindChild('DesignList').AOTfirstChild()
        #                        ;   controlTreeNode
        #                        ;   controlTreeNode = controlTreeNode.AOTnextSibling()
        #                        )
        #                    {
        #                        this.processMethods(
        #                                controlTreeNode.AOTfindChild('Methods')
        #                            ,       controlTreeNode.AOTgetProperty(#PropertyType) == enum2Str(FormControlType::SegmentedEntry)
        #                                ||  controlTreeNode.AOTgetProperty(#PropertyType) == enum2Str(FormControlType::ReferenceGroup)
        #                                ?   classStr(FormReferenceControl)
        #                                :   classStr(FormControl)
        #                            );
        #                        controlTreeNode.treeNodeRelease();
        #                    }
        #                }
        #                break;
        #            }
        #        this.merge();
        #    }
        #    catch
        #    {
        #        if(debugDump)
        #        {
        #            this.saveDoc(debugDump);
        #        }
        #    }
        #    sourceUpdate = null;
        #    _objectTreeNode.treeNodeRelease();
        #}
      ENDSOURCE
      SOURCE #run
        #private void run()
        #{
        #
        #}
      ENDSOURCE
      SOURCE #save
        #private void save(TreeNode _methodTreeNode,XmlDocument _xmlDoc)
        #{
        #    sourceUpdate.clear();
        #    sourceUpdate.Source = _xmlDoc.xml();
        #    sourceUpdate.xRefPathRecId = xRefPathsMap.exists(_methodTreeNode.treeNodePath())
        #        ?   any2int64(xRefPathsMap.lookup(_methodTreeNode.treeNodePath()))
        #        :   xRefPaths::findOrInsert(_methodTreeNode.treeNodePath()).RecId;
        #    sourceUpdate.insert();
        #
        #    if( xppMLProcessProject )
        #    {
        #        xppMLProcessProject.createReviewForProject(sourceUpdate);
        #    }
        #}
      ENDSOURCE
      SOURCE #saveDoc
        #private void saveDoc(Filename _fileName)
        #{
        #    #File
        #    FileIOPermission    filePermission = new FileIOPermission(_fileName,#IO_WRITE);
        #
        #    filePermission.assert();
        #
        #    xmlDoc.save(_fileName);
        #}
      ENDSOURCE
      SOURCE #setPrintable
        #private void setPrintable()
        #{
        #    int n;
        #    printable = '';
        #
        #    for(n = 32 ; n<128 ; n++)
        #    {
        #        printable += num2char(n);
        #    }
        #    printable = strRem(printable,'\'');
        #    printable = strRem(printable,'\"');
        #    printable = strRem(printable,'\\');
        #}
      ENDSOURCE
      SOURCE #symStrEscape
        #private void symStrEscape()
        #{
        #    int n;
        #    str c,r;
        #
        #    for(    n = strNFind(symStr,printable,1,strLen(symStr))
        #        ;   n
        #        ;   n = strNFind(symStr,printable,n+1,strLen(symStr))
        #        )
        #    {
        #        c = subStr(symStr,n,1);
        #        switch(c)
        #        {
        #            case    '\\':
        #                r = '\\';
        #                break;
        #            case    '\'':
        #                r = '\'';
        #                break;
        #            case    '"':
        #                r = '"';
        #                break;
        #            case    '\b':
        #                r = 'b';
        #                break;
        #            case    '\t':
        #                r = 't';
        #                break;
        #            case    '\n':
        #                r = 'n';
        #                break;
        #            case    '\r':
        #                r = 'r';
        #                break;
        #            default:
        #                r = 'x'+int2Hex(char2num(c,1));
        #        }
        #        symStr = substr(symStr,1,n-1)+'\\'+r+substr(symStr,n+1,strLen(symStr));
        #        n += strLen(r);
        #    }
        #}
      ENDSOURCE
      SOURCE #xRefPathsMap
        #//BP deviation documented
        #private Map xRefPathsMap()
        #{
        #    xRefPaths   xRefPaths;
        #    Map         ret = new Map(Types::String,Types::Int64);
        #
        #    TreeNodePath escapedPath = strReplace(objectPath+'\\*','\\','\\\\');
        #
        #    while
        #        //BP deviation documented
        #        select  xRefPaths
        #        where   xRefPaths.Path like escapedPath
        #    {
        #        ret.insert(xRefPaths.Path,xRefPaths.RecId);
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xRefReferences
        #private xRefTmpReferences xRefReferences()
        #{
        #    return xRefReferences;
        #}
      ENDSOURCE
      SOURCE #xrefSym
        #private void xrefSym(ClassName _superClassName)
        #{
        #    xRefName        typeName;
        #    XmlElement      dotColColElement;
        #    XmlElement      lastChild;
        #    XmlElement      varElement;
        #    RecId           resumeRecId = 0;
        #    int             resumeLine,resumeCol;
        #
        #    TreeNodePath    methodPath;
        #
        #    if(!xRefReferences)
        #    {
        #        return;
        #    }
        #
        #    if(     cbr == 0
        #        &&  (   sym == #LEFTBR_SYM
        #            ||  sym == #RGHT_PAR_SYM
        #            )
        #        )
        #    {
        #        while(  xRefReferences.line     == symLine
        #            &&  xRefReferences.Column   == symCol
        #            )
        #        {
        #            next xRefReferences;
        #        }
        #    }
        #    else if(sym                     == #STD_ID
        #        &&  xRefReferences.Kind     == xRefKind::ClrType
        #        &&  xRefReferences.Reference == XRefReference::Read
        #        &&  xRefReferences.name     like (symStr+'*')
        #        &&  (   (   xRefReferences.line     == symLine
        #                &&  xRefReferences.Column   <= symCol
        #                )
        #            ||  xRefReferences.line <= symLine
        #            )
        #        )
        #    {
        #        while(  strLen(symStr) < strLen(xRefReferences.name)
        #            &&  subStr(xRefReferences.name,1,strLen(symStr)) == symStr
        #            )
        #        {
        #            this.fetchNextSym(true);
        #        }
        #        if(symStr != xRefReferences.name)
        #        {
        #            minInt();
        #        }
        #        if(     xRefReferences.line > symLine
        #            ||  (   xRefReferences.line     == symLine
        #                &&  xRefReferences.Column   >  symCol
        #                )
        #            )
        #        {
        #            this.open('type');
        #            curr.setAttribute('domain','clr');
        #            close = 1;
        #            return;
        #        }
        #    }
        #    else if(sym     == #STD_ID
        #        &&  lastSym == #NEW_SYM
        #        &&  xRefReferences.Kind     == xRefKind::ClrTypeMethod
        #        &&  xRefReferences.Reference == XRefReference::Call
        #        &&  xRefReferences.name     == 'new'
        #        &&  (   (   xRefReferences.line     == symLine
        #                &&  xRefReferences.Column   <= symCol
        #                )
        #            ||  xRefReferences.line <= symLine
        #            )
        #        )
        #    {
        #        while(this.fetchNextSym(true,'(['))
        #        {
        #            minInt();
        #        }
        #    }
        #
        #    if(     insertRecordsetTable
        #        &&  sym == #STD_ID
        #        &&  (   symLine < xRefReferences.line
        #            ||  (   symLine == xRefReferences.line
        #                &&  symCol  <  xRefReferences.Column
        #                )
        #            )
        #        )
        #    {
        #        this.open('field');
        #        curr.setAttribute('table',insertRecordsetTable);
        #        close = 1;
        #        return;
        #    }
        #
        #    if(     sym                     == #STD_ID
        #        &&  xRefReferences.name     != symStr
        #        &&  (   xRefReferences.line         <  symLine
        #            ||  (   xRefReferences.line     == symLine
        #                &&  xRefReferences.Column   <  symCol
        #                )
        #            )
        #        &&  xRefReferences.Kind     == xRefKind::Table
        #        &&  xRefReferences.Reference== XRefReference::Write
        #        &&  curr.tagName()       == 'sql'
        #        )
        #    {
        #        resumeRecId = xRefReferences.RecId;
        #        resumeLine  = xRefReferences.line;
        #        resumeCol   = xRefReferences.Column;
        #
        #        while(  xRefReferences.name     != symStr
        #            &&  (   xRefReferences.line          <  symLine
        #                ||  (   xRefReferences.line     == symLine
        #                    &&  xRefReferences.Column   <  symCol
        #                    )
        #                )
        #            )
        #        {
        #            next xRefReferences;
        #        }
        #    }
        #
        #    while(  (   xRefReferences.name == symStr
        #            ||  (   sym                         == #SUPER_SYM
        #                &&  xRefReferences.name         == methodName
        #                &&  xRefReferences.Reference    == XRefReference::Call
        #                &&  (
        #/*                        (   objectType                      == UtilElementType::Class
        #                        &&  (   xRefReferences.ParentName   == _superClassName
        #                            ||  (   objectSuperSet
        #                                &&  objectSuperSet.in(xRefReferences.ParentName)
        #                                )
        #                            )
        #                        )
        #*/
        #                        (   (   (   (   objectType          == UtilElementType::Class
        #                                    ||  objectType          == UtilElementType::Form
        #                                    ||  objectType          == UtilElementType::Query
        #                                    ||  objectType          == UtilElementType::DataSet
        #                                    )
        #                                &&  xRefReferences.Kind     == xRefKind::ClassInstanceMethod
        #                                )
        #                            ||  (   objectType              == UtilElementType::Table
        #                                &&  xRefReferences.Kind     == xRefKind::TableInstanceMethod
        #                                )
        #                            ||  (   objectType              == UtilElementType::TableMap
        #                                &&  xRefReferences.Kind     == xRefKind::MapInstanceMethod
        #                                )
        #                            )
        #                        &&  (   xRefReferences.ParentName   == _superClassName
        #                            ||  xRefReferences.ParentName   == ''
        #                            ||  (   objectSuperSet
        #                                &&  objectSuperSet.in(xRefReferences.ParentName)
        #                                )
        #                            )
        #                        )
        #                    )
        #                )
        #            ||  (   lastSym                     == #DBLCOLON_SYM
        #                &&  xRefReferences.Reference    == XRefReference::Read
        #                &&  xRefReferences.Kind         == xRefKind::ClrType
        #                &&  xRefReferences.ParentName   == ''
        #                )
        #            ||  (   lastSym                     == #NEW_SYM
        #                &&  xRefReferences.Reference    == XRefReference::Call
        #                &&  xRefReferences.Kind         == xRefKind::ClrTypeMethod
        #                &&  xRefReferences.name         == 'new'
        #                &&  xRefReferences.ParentName   == ''
        #                )
        #            )
        #        &&  (   xRefReferences.line <  symLine
        #            ||  (   xRefReferences.line == symLine
        #                &&  xRefReferences.Column <= symCol
        #                )
        #            )
        #        )
        #    {
        #        typeName =
        #                xRefReferences.Kind == xRefKind::BasicType
        #            ?   XppMLSourceMarkup::parentBasicType(xRefReferences.ParentName)
        #            :   xRefReferences.ParentName;
        #
        #        switch(xRefReferences.Reference)
        #        {
        #            case    XRefReference::Definition:
        #                this.open('def').setAttribute('sep',',');
        #                this.open('method');
        #                sym = #STD_ID;
        #                close = 1;
        #                break;
        #
        #            case    XRefReference::Declaration:
        #/*
        #                if(     (   xRefReferences.Kind == xRefKind::BasicType
        #                        ||  (   xRefReferences.Kind         == xRefKind::ExtendedType
        #                            &&  xRefReferences.ParentName   == ''
        #                            )
        #                        )
        #                    &&  curr.nodeType() == XmlNodeType::Element
        #                    &&  curr.tagName() != 'decl'
        #                    )
        #                {
        #                    this.convertBasicType();
        #                }
        #*/
        #                lastChild = curr.lastChild();
        #
        #                if(     lastChild.nodeType() == XmlNodeType::Element
        #                    &&  lastChild.tagName() == 'type'
        #                    )
        #                {
        #                    this.open('decl');
        #                    if(cbr > 0)
        #                    {
        #                        curr.setAttribute('sep',',');
        #                    }
        #                    curr.appendChild(lastChild);
        #                }
        #                this.openVarOrIntr(typeName,xRefReferences.Kind);
        #                break;
        #            case    XRefReference::Read:
        #                if(     !cbr
        #                    &&  curr.selectSingleNode('parent::con[parent::preamble]')
        #                    )
        #                {
        #                    this.open('attr');
        #                }
        #                if(     typeName
        #                    ||  (   xRefReferences.Kind == xRefKind::ExtendedType
        #                        &&  !typeName
        #                        &&  !inExtendedTypeIntr
        #                        &&  stmt
        #                        &&  stmt.hasChildNodes()
        #                        )
        #                    )
        #                {
        #                    this.openVarOrIntr(typeName,xRefReferences.Kind);
        #                    close = 1;
        #                }
        #                else
        #                {
        #                    inExtendedTypeIntr = false;
        #
        #                    if(xRefReferences.Kind==xRefKind::Label)
        #                    {
        #                        curr.setAttribute('domain',strlwr(enum2str(xRefReferences.Kind)));
        #                        break;
        #                    }
        #
        #                    close = 1;
        #
        #                    if(     lastSym                 == #DBLCOLON_SYM
        #                        &&  xRefReferences.Kind     == xRefKind::ClrType
        #                        &&  xRefReferences.ParentName == ''
        #                        )
        #                    {
        #                        this.open('enum').setAttribute('type',xRefReferences.name);
        #                    }
        #                    else
        #                    {
        #                        this.open('type');
        #                        switch(xRefReferences.Kind)
        #                        {
        #                            case    xRefKind::Table:
        #                                curr.setAttribute('domain','table');
        #                                break;
        #                            case    xRefKind::Class:
        #                                curr.setAttribute('domain','class');
        #                                break;
        #                            case    xRefKind::ExtendedType:
        #                                curr.setAttribute('domain','edt');
        #                                break;
        #                            case    xRefKind::Enum:
        #                                curr.setAttribute('domain','enum');
        #                                break;
        #                            case    xRefKind::BasicType:
        #                                curr.setAttribute('domain','basic');
        #                                break;
        #                            case    xRefKind::ClrType:
        #                                curr.setAttribute('domain','clr');
        #                                break;
        #                            default:
        #                                curr.setAttribute('domain',strlwr(enum2str(xRefReferences.Kind)));
        #                        }
        #                    }
        #                }
        #                break;
        #            case    XRefReference::Write:
        #                if(     curr.nodeType()  == XmlNodeType::Element
        #                    &&  curr.tagName()   == 'assign'
        #                    &&  (   xRefReferences.Kind == xRefKind::TableField
        #                        ||  xRefReferences.Kind == xRefKind::MapField
        #                        )
        #                    )
        #                {
        #                    dotColColElement = curr.lastChild();
        #                    if(     dotColColElement.tagName() != 'op'
        #                        ||  dotColColElement.text() != '.')
        #                    {
        #                        throw error(strFmt('unrecognized element %1',dotColColElement.xml()));
        #                    }
        #                    varElement = curr.previousSibling();
        #                    if(     !varElement
        #                        ||  varElement.nodeType() != XmlNodeType::Element
        #                        ||  varElement.tagName() != 'var'
        #                        )
        #                    {
        #                        throw error(strFmt('var problem (%1,%2)',symLine,symCol));
        #                    }
        #                    curr = varElement;
        #                    curr.appendChild(dotColColElement);
        #                    this.openVarOrIntr(typeName,xRefReferences.Kind);
        #                    resume = 'assign';
        #                    close = 2;
        #                    break;
        #                }
        #                else if(curr.nodeType()  == XmlNodeType::Element
        #                    &&  curr.tagName()   == 'assign'
        #                    )
        #                {
        #                    this.openVarOrIntr(typeName,xRefReferences.Kind);
        #                }
        #                else if(curr.nodeType() == XmlNodeType::Element
        #                    &&  curr.tagName() != 'var'
        #                    )
        #                {
        #                    if(     (   xRefReferences.Kind == xRefKind::Table
        #                            ||  xRefReferences.Kind == xRefKind::Map
        #                            )
        #                        &&  (   lastSym == #SEARCH_SYM  //select
        #                            ||  lastSym == #JOIN_SYM    //join
        #                            )
        #                        &&  curr.tagName() == 'el'
        #                        )
        #                    {
        #                        this.closeCurr();
        #                    }
        #
        #                    this.openVarOrIntr(typeName,xRefReferences.Kind);
        #                    if(lastSym == #INSERT_SYM)
        #                    {
        #                        insertRecordsetTable = typeName;
        #                    }
        #                }
        #                lastChild = curr.selectSingleNode('ancestor-or-self::*[@sep=","]');
        #                if(     lastChild
        #                    &&  lastChild.tagName() !='sql'
        #                    )
        #                {
        #                    postOpen = 'assign';
        #                }
        #                close = 1;
        #                break;
        #            case    XRefReference::Call:
        #                if(     lastSym                 == #NEW_SYM
        #                    &&  xRefReferences.Kind     == xRefKind::ClrTypeMethod
        #                    &&  xRefReferences.Reference == XRefReference::Call
        #                    &&  xRefReferences.name     == 'new'
        #                    )
        #                {
        #                    lastChild = curr.lastChild();
        #                    this.open('call').setAttribute('sep',',');
        #                    this.open('method');
        #                    curr.setAttribute('type',symStr);
        #                    curr.setAttribute('domain','clr');
        #                    curr.appendChild(lastChild);
        #                    this.closeCurr();
        #                    this.open('type').setAttribute('domain','clr');
        #                    close = 1;
        #                    break;
        #                }
        #                else if(sym == #SUPER_SYM)
        #                {
        #                    this.open('call',',');
        #                    this.open('method').setAttribute('name',methodName);
        #                    switch(xRefReferences.Kind)
        #                    {
        #                        case    xRefKind::ClassInstanceMethod:
        #                            curr.setAttribute('class',
        #                                    xRefReferences.ParentName
        #                                ?   xRefReferences.ParentName
        #                                :       _superClassName
        #                                    ?   _superClassName
        #                                    :   classStr(Object)
        #                                );
        #                            break;
        #                        case    xRefKind::TableInstanceMethod:
        #                        case    xRefKind::MapInstanceMethod:
        #                            curr.setAttribute('table',xRefReferences.ParentName ? xRefReferences.ParentName : tableStr(Common));
        #                            break;
        #                        default:
        #                            throw error(strFmt("@PML57",xRefReferences.Kind));
        #                    }
        #                    close = 1;
        #                    break;
        #                }
        #
        #                dotColColElement = curr.lastChild();
        #                this.open('call').setAttribute('sep',',');
        #                this.open('method');
        #                close = 1;
        #                switch(xRefReferences.Kind)
        #                {
        #                    case    xRefKind::ClassInstanceMethod:
        #                    case    xRefKind::ClassStaticMethod:
        #                        curr.setAttribute('domain','class');
        #                        curr.setAttribute('type',xRefReferences.ParentName);
        #                        break;
        #                    case    xRefKind::TableInstanceMethod:
        #                    case    xRefKind::TableStaticMethod:
        #                    case    xRefKind::MapInstanceMethod:
        #                    case    xRefKind::MapStaticMethod:
        #                        curr.setAttribute('domain','table');
        #                        curr.setAttribute('type',xRefReferences.ParentName);
        #                        break;
        #                    case    xRefKind::FormMethod:
        #                        curr.setAttribute('domain','form');
        #                        curr.setAttribute('type',xRefReferences.ParentName);
        #                        break;
        #                    case    xRefKind::DataSetMethod:
        #                        curr.setAttribute('domain','dataset');
        #                        curr.setAttribute('type',xRefReferences.ParentName);
        #                        break;
        #                    case    xRefKind::ClrTypeMethod:
        #                    case    #xRefKind_ClrStaticMethod:
        #                        curr.setAttribute('domain','clr');
        #                        curr.setAttribute('type',xRefReferences.ParentName);
        #                        break;
        #                    case    xRefKind::Predefined:
        #                    case    xRefKind::LocalMethod:
        #                        break;
        #                    default:
        #                        throw error(strFmt('strange call (%1,%2)',symLine,symCol));
        #                }
        #                break;
        #            case    XRefReference::EventHandlerCall:
        #                break;
        #            default:
        #                setPrefix(funcName());
        #                throw error(strFmt("@SYS340839",xRefReferences.Reference));
        #        }
        #
        #        if(resumeRecId)
        #        {
        #            xRefReferences.delete();
        #        }
        #
        #        next xRefReferences;
        #    }
        #
        #    if(resumeRecId)
        #    {
        #        methodPath = xRefReferences.Path;
        #
        #        select  xRefReferences
        #        order   line,Column,RecId
        #        where   xRefReferences.Path == methodPath
        #            &&  (   xRefReferences.line > resumeLine
        #                ||  (   xRefReferences.line == resumeLine
        #                    &&  (   xRefReferences.Column > resumeCol
        #                        ||  (   xRefReferences.Column == resumeCol
        #                            &&  xRefReferences.RecId  >= resumeRecId
        #                            )
        #                        )
        #                    )
        #                );
        #    }
        #}
      ENDSOURCE
      SOURCE #construct
        #public static XppMLSourceMarkup construct()
        #{
        #    return new XppMLSourceMarkup();
        #}
      ENDSOURCE
      SOURCE #executeSQLUpdate
        #private server static int executeSQLUpdate(str _sqlUpdate)
        #{
        #    Statement   statement    = new Connection().createStatement();
        #    int         ret;
        #    SqlStatementExecutePermission ssep;
        #
        #    //assert executeUpdate
        #    ssep = new SqlStatementExecutePermission(_sqlUpdate);
        #    ssep.assert();
        #    //BP Deviation Documented
        #    ret = statement.executeUpdate(_sqlUpdate);
        #    //revert assert
        #    CodeAccessPermission::revertAssert();
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    XppMLSourceMarkup sourceMarkup;
        #
        #    TreeNodePath    singlePath = '';
        #
        #    TreeNode    treeNode;
        #    TreeNode    restartFrom;// = TreeNode::findNode(@);
        #    sourceMarkup = XppMLSourceMarkup::construct();
        #
        #    singlePath = ''
        #    +@'\Classes\Class1'
        #    //+@'\Classes\ProjInvoiceLines'
        #    ;
        #
        #    if(singlePath)
        #    {
        #        sourceMarkup.parmDebug(true,'c:\\Users\\Public\\Documents\\dump.xml');
        #        sourceMarkup.processTreeNode(TreeNode::findNode(singlePath));
        #    }
        #    else
        #    {
        #        sourceMarkup.parmDebug(false,'c:\\Users\\Public\\Documents\\dump.xml');
        #        setPrefix('Processing');
        #
        #        for(    treeNode = restartFrom ? restartFrom : TreeNode::findNode(#ClassesPath).AOTfirstChild()
        #            ;   treeNode
        #            ;   treeNode = treeNode.AOTnextSibling()
        #            )
        #        {
        #            sourceMarkup.processTreeNode(treeNode);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #parentBasicType
        #public static IdentifierName parentBasicType(IdentifierName _parentName)
        #{
        #    switch(_parentName)
        #        {
        #        case    'DB_TEXT':
        #            //BP deviation documented
        #            return  identifierStr(str);
        #        case    'DB_INT':
        #            //BP deviation documented
        #            return  identifierStr(int);
        #        case    'DB_DBL':
        #            //BP deviation documented
        #            return  identifierStr(real);
        #        case    'DB_DATE':
        #            //BP deviation documented
        #            return  identifierStr(utcDateTime);
        #        case    'DB_DATETIME':
        #            //BP deviation documented
        #            return  identifierStr(utcDateTime);
        #        case    'DB_QUEUE':
        #            //BP deviation documented
        #            return  identifierStr(container);
        #        case    'DB_STR':
        #            //BP deviation documented
        #            return  identifierStr(str);
        #        case    '':         //AX BUG
        #            //BP deviation documented
        #            return  identifierStr(int64);
        #        default:
        #            throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: xRefUpdateTmpReferences unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #xRefUpdateTmpReferences
    PROPERTIES
      Name                #xRefUpdateTmpReferences
      Extends             #RunBase
      Origin              #{2D170655-0000-1000-5B25-E1E2261A413E}
      LegacyId            #1621
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #/*
        #A complete xRef (no compression) for the selected objects only (don't get
        #mixed up with everything else), will be generated in a temporary table, for
        #browsing etc.
        #
        #Client based, as long as formBuild only exists on the client
        #*/
        #public class xRefUpdateTmpReferences extends RunBase
        #{
        #    xRefTmpReferences allTmpxRefReferences;
        #    #define.PropertyString("Property")
        #
        #    //AXI
        #    boolean full;
        #    //AXI end
        #}
      ENDSOURCE
      SOURCE #fillTmpXref
        #///
        #///This function is a utility function which will take the xref from enumerator and insert
        #/// into xRefTmpReferences table
        #///
        #void fillTmpXref(MapEnumerator enum, TreeNode aNode)
        #{
        #    xRefTmpReferences tmpxRefReferences;
        #
        #    while (enum.moveNext())
        #    {
        #        if (substr(enum.currentKey(),1,strlen(aNode.treeNodePath())) == aNode.treeNodePath())
        #        {
        #            tmpxRefReferences = xRefCreate::makeTmp(enum.currentValue(), enum.currentKey(),full);
        #            while select tmpxRefReferences
        #                order by RecId
        #            {
        #                allTmpxRefReferences.clear();
        #                allTmpxRefReferences.data(tmpxRefReferences);
        #                allTmpxRefReferences.insert();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #fillTmpxRefReferences
        #void fillTmpxRefReferences(TreeNode aNode,boolean _includeProperties = true)
        #{
        #//    xRefTmpReferences tmpxRefReferences;
        #    TreeNodeTraverser treeNodeTraverser;
        #
        #    // Map to store xref information generated during compile time
        #    Map compileMap = new Map(Types::String, Types::Class);
        #
        #    // Map to store xref information generated during property sweep time
        #    Map propertyMap = new Map(Types::String, Types::Class);
        #
        #    str className;
        #    MapEnumerator enum;
        #    ;
        #
        #    appl.updatexRefSet(true);
        #    treeNodeTraverser = new TreeNodeTraverser(aNode);
        #    treeNodeTraverser.next();
        #
        #    appl.globalCache().set(classstr(xRefUpdateTmpReferences), '', compileMap);
        #
        #
        #    className = classstr(xRefUpdateTmpReferences);
        #    className = strins(className,#PropertyString,strlen(classname)+1);
        #    appl.globalCache().set(className, '', propertyMap);
        #
        #    treeNodeTraverser.currentNode().AOTmakeXref(1);
        #
        #    appl.globalCache().set(classstr(xRefUpdateTmpReferences), '', null);
        #    appl.globalCache().set(className, '', null);
        #
        #    appl.updatexRefSet(false);
        #
        #    // Store the compile xref infomation in database
        #    enum = compileMap.getEnumerator();
        #    this.fillTmpXref(enum,aNode);
        #
        #    if(_includeProperties)
        #    {
        #        // Store the property xref infomation in database
        #        enum = propertyMap.getEnumerator();
        #        this.fillTmpXref(enum,aNode);
        #    }
        #}
      ENDSOURCE
      SOURCE #parmFull
        #public boolean parmFull(boolean _full = full)
        #{
        #    if(!prmIsDefault(_full))
        #    {
        #        full = _full;
        #    }
        #    return full;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #XppMLParameters
  PROPERTIES
    Name                #XppMLParameters
    Origin              #{474F0A7B-D02A-453D-90D5-841C8458AFE2}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    XppMLParameters::find();    //create if does not exist
      #
      #    super();
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XppMLParameters
          Table               #XppMLParameters
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@PML72
      TitleDatasource     #XppMLParameters
      Style               #TableOfContents
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GROUP
        PROPERTIES
          Name                #SQLTableFullName
          ElementPosition     #1073741822
          HierarchyParent     #TOCPage1Body
          Caption             #@PML107
          DataSource          #XppMLParameters
          DataGroup           #SQLTableFullName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TOCPage1Body
          ElementPosition     #1610612733
          HierarchyParent     #TOCPage1
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TOCPage1Header
          ElementPosition     #1073741822
          HierarchyParent     #TOCPage1
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TopValue
          ElementPosition     #1610612734
          HierarchyParent     #TOCPage1Body
          Caption             #@SYS4081644
          DataSource          #XppMLParameters
          DataGroup           #TopValue
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #TOCTab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          Tabs                #1
          Columns             #2
          Columnspace         #0
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
          Style               #VerticalTabs
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TOCPage1
          ElementPosition     #1431655764
          HierarchyParent     #TOCTab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #TOCPage1HeaderMainInstruction
          ElementPosition     #1073741822
          HierarchyParent     #TOCPage1Header
          Text                #@pml72
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #TOCPage1HeaderSupplemental
          ElementPosition     #1610612733
          HierarchyParent     #TOCPage1Header
          Text                #@pml73
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #XppMLProcessProjectDialog
  PROPERTIES
    Name                #XppMLProcessProjectDialog
    Origin              #{5DC64116-AECF-4EBC-BCD1-8A948091838A}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    XppMLProcessProject          projectProcess;
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    DialogRunbase   dialog = element.args().caller();
      #
      #
      #    if( GroupPrivateProject.optionValue() )
      #    {
      #        projectProcess.parmPrivateProject(true);
      #        projectProcess.parmProjectToRun(PrivateProject.valueStr());
      #    }
      #    else
      #    {
      #        projectProcess.parmPrivateProject(false);
      #        projectProcess.parmProjectToRun(SharedProject.valueStr());
      #    }
      #
      #    if (projectProcess.checkCloseDialog())
      #    {
      #        super();
      #    }
      #}
    ENDSOURCE
    SOURCE #groupChanged
      #public void groupChanged()
      #{
      #    if( GroupPrivateProject.optionValue() )
      #    {
      #        PrivateProject.selection(0);
      #    }
      #    else
      #    {
      #        SharedProject.selection(0);
      #    }
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    if (!element.args().caller())
      #    {
      #        // Form %1 requires an active class.
      #        throw error(strfmt("@SYS22862",element.name()));
      #    }
      #
      #    projectProcess = element.args().caller().runbase();
      #
      #    super();
      #
      #    PrivateProject.add('');
      #
      #    XppMLProcessProject::addProjectsToComboBox(PrivateProject,true);
      #
      #    SharedProject.add('');
      #
      #    XppMLProcessProject::addProjectsToComboBox(SharedProject);
      #
      #    // default the form fields from unpacked class.
      #
      #    if( !projectProcess.parmPrivateProject() )
      #    {
      #        GroupSharedProject.optionValue(1);
      #        SharedProject.selectText(projectProcess.parmProjectToRun());
      #    }
      #    else
      #    {
      #        GroupPrivateProject.optionValue(1);
      #        PrivateProject.selectText(projectProcess.parmProjectToRun());
      #    }
      #}
    ENDSOURCE
    SOURCE #runBase
      #RunBase runBase()
      #{
      #    return projectProcess;
      #}
      #
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@PML58
      WindowResize        #Fixed
      HideToolbar         #Yes
      HideIfEmpty         #No
      Style               #Dialog
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          Left                #Auto (right)
          ElementPosition     #1431655764
          HierarchyParent     #DialogCommit
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DialogCommit
          ElementPosition     #1431655764
          Style               #DialogCommit
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DialogContent
          ElementPosition     #1431655764
          HierarchyParent     #TabPage
          Style               #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #dialogStartGrp
          ElementPosition     #920350134
          HierarchyParent     #DialogContent
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupPrivateProject
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1533916890
          HierarchyParent     #DialogContent
          FrameType           #Raised 3D
          Caption             #@SYS117519
          FrameOptionButton   #Radio
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    element.groupChanged();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupSharedProject
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1840700268
          HierarchyParent     #DialogContent
          FrameType           #Raised 3D
          Caption             #@SYS117520
          FrameOptionButton   #Radio
          OptionValue         #0
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    element.groupChanged();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Identification
          ElementPosition     #1227133512
          HierarchyParent     #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          ElementPosition     #715827882
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPage
          ElementPosition     #1431655764
          HierarchyParent     #Tab
          Caption             #@PML58
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #PrivateProject
          AutoDeclaration     #Yes
          AlignControl        #No
          HelpText            #@SYS117523
          ElementPosition     #1431655764
          HierarchyParent     #GroupPrivateProject
          HideFirstEntry      #Yes
          ShowLabel           #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #SharedProject
          AutoDeclaration     #Yes
          AlignControl        #No
          HelpText            #@SYS117523
          ElementPosition     #1431655764
          HierarchyParent     #GroupSharedProject
          HideFirstEntry      #Yes
          ShowLabel           #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonCancel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Text                #@SYS323120
          DefaultButton       #Yes
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonOK
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          Text                #@SYS301992
          DefaultButton       #Yes
          Command             #263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #HeaderTitle
          ElementPosition     #613566756
          HierarchyParent     #DialogContent
          Text                #@PML58
          FontSize            #14
          Bold                #Normal
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #XppMLReviewForm
  PROPERTIES
    Name                #XppMLReviewForm
    Origin              #{6E8D6C40-36AA-4EC4-BEA5-7054053205D7}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysFormSplitter_Y   _formSplitterVertical;
      #    SysFormSplitter_X   _formSplitterHorizontal;
      #
      #    XppMLManage         xppMLManage;
      #
      #    boolean             tabPageTreeActiavted;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    #Help
      #
      #    super();
      #
      #    xppMLManage = XppMLManage::construct();
      #
      #    xppMLManage.parmTabPageSource(TabPageSource);
      #    xppMLManage.parmTabPageSourceXml(TabPageXML);
      #    xppMLManage.parmCodeSource(StringEditCodeSource);
      #    xppMLManage.parmCodeMarkupActiveX(ActiveXXML);
      #    xppMLManage.parmTreeControl(Tree);
      #
      #    xppMLManage.parmReviewTable(XppMLReviewTable);
      #    xppMLManage.parmXppMLMarkup(XppMLMarkup);
      #
      #
      #
      #    _formSplitterHorizontal = new SysFormSplitter_X(GroupTopLeftSpliter,GroupTopLeft,this);
      #
      #}
    ENDSOURCE
    SOURCE #updateDesign
      #public void updateDesign()
      #{
      #    ButtonExecuteSql.enabled( !XppMLReviewTable.ProjectSource );
      #    ButtonExecuteTestSql.enabled( !XppMLReviewTable.ProjectSource );
      #}
    ENDSOURCE
    SOURCE #updateDS
      #public void updateDS()
      #{
      #    XppMLReviewMethod_ds.executeQuery();
      #    XppMLResultLine_ds.executeQuery();
      #
      #    XppMLReviewTable_ds.research(true);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XppMLReviewTable
          Table               #XppMLReviewTable
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #    XppMLReviewTable    orig = XppMLReviewTable.orig();
          #
          #    super();
          #
          #    if( orig.BaseReviewRef != XppMLReviewTable.BaseReviewRef )
          #    {
          #        XppMLManage.initializeTree();
          #    }
          #}
        ENDSOURCE
        SOURCE #delete
          #public void delete()
          #{
          #    super();
          #
          #    XppMLManage.initializeTree();
          #}
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    this.updateFieldAccess();
          #
          #    element.updateDesign();
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #updateFieldAccess
          #public void updateFieldAccess()
          #{
          #    XppMLReviewTable_ds.object(fieldNum(XppMLReviewTable,XPathFilterExpression)).allowEdit(!XppMLReviewTable.ProjectSource);
          #    XppMLReviewTable_ds.object(fieldNum(XppMLReviewTable,XPathResultExpression)).allowEdit(!XppMLReviewTable.ProjectSource);
          #    XppMLReviewTable_ds.object(fieldNum(XppMLReviewTable,XPathSelectExpression)).allowEdit(!XppMLReviewTable.ProjectSource);
          #    XppMLReviewTable_ds.object(fieldNum(XppMLReviewTable,BaseReviewRef)).allowEdit(!XppMLReviewTable.ProjectSource);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XppMLReviewMethod
          Table               #XppMLReviewMethod
          Index               #ReviewTableRefXRefPathsRefIdx
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #XppMLReviewTable
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    xppMLManage.applyCodeView();
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XppMLMarkup
          Table               #XppMLMarkup
          JoinSource          #XppMLReviewMethod
          LinkType            #InnerJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #    super();
          #
          #    this.queryBuildDataSource().addLink(
          #            fieldNum(XppMLReviewMethod,xRefPathsRef)
          #        ,   fieldNum(XppMLMarkup,RecId)
          #        );
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XppMLResultLine
          Table               #XppMLResultLine
          Index               #ReviewTableRefXRefPathsRefIdx
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #XppMLReviewTable
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XppMLMarkupResult
          Table               #XppMLMarkup
          OnlyFetchActive     #Yes
          JoinSource          #XppMLResultLine
          LinkType            #InnerJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD XppML
            PROPERTIES
              Enabled             #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #    super();
          #
          #    this.queryBuildDataSource().addLink(
          #            fieldNum(XppMLResultLine,xRefPathsRef)
          #        ,   fieldNum(XppMLMarkup,RecId)
          #        );
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    XppMLReviewMethod XppMLReviewTable
    XppMLMarkup XppMLReviewMethod
    XppMLResultLine XppMLReviewTable
    XppMLMarkupResult XppMLResultLine
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@PML51
      SetCompany          #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          Style               #Strip
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MethodsButtonGroup
          ElementPosition     #1879048189
          HierarchyParent     #ActionPaneTab
          Caption             #@SYS25613
          DataSource          #XppMLReviewMethod
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #NewDeleteGroup
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #GridResult
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #TabPageResults
          VisibleCols         #3
          DataSource          #XppMLResultLine
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #GridxPathRef
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #GroupTopRight
          DataSource          #XppMLReviewMethod
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #ReviewTableGrid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #TabPageGrid
          DataSource          #XppMLReviewTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Collection
          ElementPosition     #536870910
          HierarchyParent     #ReviewTableGrid
          BackgroundColor     #Window background
          DataSource          #XppMLReviewTable
          DataGroup           #Collection
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Execution
          ElementPosition     #1610612730
          HierarchyParent     #ReviewTableGrid
          BackgroundColor     #Window background
          DataSource          #XppMLReviewTable
          DataGroup           #LastExecution
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupExpressions
          Width               #Column width
          Height              #Column height
          ElementPosition     #1789569705
          HierarchyParent     #GroupTopLeft
          Caption             #@SYS90545
          FrameOptionButton   #Hide
          DataSource          #XppMLReviewTable
          DataGroup           #Expressions
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupQtyMethodsResults
          ElementPosition     #1879048185
          HierarchyParent     #ReviewTableGrid
          BackgroundColor     #Window background
          DataSource          #XppMLReviewTable
          DataGroup           #QtyMethodsResults
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupTopLeft
          AutoDeclaration     #Yes
          Width               #400
          Height              #Column height
          ElementPosition     #858993458
          HierarchyParent     #TabPageObjects
          Caption             #@PML60
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupTopLeftSpliter
          AutoDeclaration     #Yes
          Width               #5
          Height              #Column height
          ElementPosition     #1288490187
          HierarchyParent     #TabPageObjects
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #///<summary>
            #///Moves the controls down on the basis of x and y coordinates of the splitter control
            #///</summary>
            #///<param name="_x">
            #///The x coordinate of mouse movement
            #///</param>
            #///<param name="_y">
            #///The y coordinate of mouse movement
            #///</param>
            #///<param name="_button">
            #///An Integer data type that specifies which mouse button is down.
            #///</param>
            #///<param name="_ctrl">
            #///A Boolean data type that specifies whether the CTRL key is down.
            #///</param>
            #///<param name="_shift">
            #///A Boolean data type that specifies whether the SHIFT key is down.
            #///</param>
            #///<returns>
            #///A return of zero indicates the event has been handled. Typically, when this method is overridden, the return value from a call to super is returned
            #///</returns>
            #
            #public int mouseDown(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    ;
            #    _formSplitterHorizontal.mouseDown(_x, _y, _button, _ctrl, _shift);
            #    return super(_x, _y, _button, _ctrl, _shift);
            #
            #
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #///<summary>
            #///Moves the controls on the basis of x and y coordinates of the splitter control.
            #///</summary>
            #///<param name="_x">
            #///An Integer data type that specifies the x-coordinate of the cursor.
            #///The coordinate is relative to the upper-left corner of the control.
            #///</param>
            #///<param name="_y">
            #///An Integer data type that specifies the y-coordinate of the cursor.
            #///The coordinate is relative to the upper-left corner of the control.
            #///</param>
            #///<param name="_button">
            #///An Integer data type that specifies which mouse button is down.
            #///</param>
            #///<param name="_ctrl">
            #///A Boolean data type that specifies whether the CTRL key is down.
            #///</param>
            #///<param name="_shift">
            #///A Boolean data type that specifies whether the SHIFT key is down.
            #///</param>
            #///<returns>
            #///A return of zero indicates the event has been handled. Typically, when this method is overridden,
            #///the return value from a call to super is returned
            #///</returns>
            #
            #public int mouseMove(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    ;
            #    _formSplitterHorizontal.mouseMove(_x,_y,_button,_ctrl,_shift);
            #    return super(_x, _y, _button, _ctrl, _shift);
            #
            #
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #///<summary>
            #///Moves the controls up on the basis of x and y coordinates of the splitter control.
            #///</summary>
            #///<param name="_x">
            #///An Integer data type that specifies the x-coordinate of the cursor.
            #///The coordinate is relative to the upper-left corner of the control.
            #///</param>
            #///<param name="_y">
            #///An Integer data type that specifies the y-coordinate of the cursor.
            #///The coordinate is relative to the upper-left corner of the control
            #///</param>
            #///<param name="_button">
            #///An Integer data type that specifies the y-coordinate of the cursor.
            #///The coordinate is relative to the upper-left corner of the control
            #///</param>
            #///<param name="_ctrl">
            #///A Boolean data type that specifies whether the CTRL key is down.
            #///</param>
            #///<param name="_shift">
            #///A Boolean data type that specifies whether the SHIFT key is down.
            #///</param>
            #///<returns>
            #///A return of zero indicates the event has been handled. Typically, when this method is overridden,
            #///the return value from a call to super is returned
            #///</returns>
            #
            #
            #public int mouseUp(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    ;
            #    _formSplitterHorizontal.mouseUp(_x, _y, _button, _ctrl, _shift);
            #    return super(_x, _y, _button, _ctrl, _shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupTopRight
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #TabPageObjects
          Caption             #@SYS25613
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Name
          ElementPosition     #805306365
          HierarchyParent     #ReviewTableGrid
          BackgroundColor     #Window background
          DataSource          #XppMLReviewTable
          DataGroup           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Project
          ElementPosition     #1073741820
          HierarchyParent     #ReviewTableGrid
          BackgroundColor     #Window background
          DataSource          #XppMLReviewTable
          DataGroup           #Project
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ResultsGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #TabPageResults
          DataSource          #XppMLResultLine
          DataGroup           #Results
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #ReferenceGroup
          ElementPosition     #1342177275
          HierarchyParent     #ReviewTableGrid
          DataSource          #XppMLReviewTable
          ReferenceField      #BaseReviewRef
          ReplacementFieldGroup #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          Style               #FastTabs
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #TabObjects
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #GroupTopLeft
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageGrid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #TabObjects
          Caption             #@SYS95914
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageObjects
          ElementPosition     #715827882
          HierarchyParent     #Tab
          Caption             #@SYS60543
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageResults
          ElementPosition     #1789569705
          HierarchyParent     #Tab
          Caption             #@PML53
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageSource
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@PML61
          FastTabExpanded     #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #pageActivated
            #public void pageActivated()
            #{
            #    super();
            #
            #    xppMLManage.applyCodeView();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageTree
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #TabObjects
          Caption             #@PML106
        ENDPROPERTIES
        
        METHODS
          SOURCE #pageActivated
            #public void pageActivated()
            #{
            #    super();
            #
            #    if( !tabPageTreeActiavted )
            #    {
            #        xppMLManage.initializeTree();
            #    }
            #
            #    tabPageTreeActiavted = true;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageXML
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #Tab
          Caption             #@PML62
          FastTabExpanded     #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #pageActivated
            #public void pageActivated()
            #{
            #    super();
            #
            #    xppMLManage.applyCodeView();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIVEX
        PROPERTIES
          Name                #ActiveXXML
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #TabPageXML
          Caption             #Microsoft Web Browser
          ClassName           #{8856F961-340A-11D0-A96B-00C04FD705A2}
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
        BINARY 0
          
        ENDBINARY
        BINARY 1
          00
        ENDBINARY
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonExecuteSql
          AutoDeclaration     #Yes
          HelpText            #@PML59
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          Text                #@SYS12440
          ButtonDisplay       #Text & Image above
          NormalImage         #3214
          ImageLocation       #EmbeddedResource
          NeedsRecord         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    xppMLManage.execute();
            #
            #    element.updateDS();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonExecuteTestSql
          AutoDeclaration     #Yes
          HelpText            #@PML59
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Text                #@SYS31561
          ButtonDisplay       #Text & Image above
          NormalImage         #11448
          ImageLocation       #EmbeddedResource
          NeedsRecord         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    xppMLManage.execute(true);
            #
            #    element.updateDS();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #EditButton
          AutoDeclaration     #Yes
          HelpText            #@SYS27471
          ElementPosition     #1431655764
          HierarchyParent     #MethodsButtonGroup
          Text                #@SYS453
          ButtonDisplay       #Text & Image above
          NormalImage         #7672
          ImageLocation       #EmbeddedResource
          NeedsRecord         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    super();
            #
            #    if(XppMLMarkup.Path)
            #    {
            #        SysInfoAction_Editor::newOpen(XppMLMarkup.Path).run();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DeleteButton
          ElementPosition     #1610612733
          HierarchyParent     #NewDeleteGroup
          Text                #@sys14425
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #NewButton
          ElementPosition     #1073741822
          HierarchyParent     #NewDeleteGroup
          Text                #@sys2055
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CodeGenMarkup_Path
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #GridxPathRef
          DataSource          #XppMLMarkup
          DataField           #Path
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GroupExpressions_XPathFilterExpression
          Width               #Column width
          Height              #Column height
          ElementPosition     #1288490187
          HierarchyParent     #GroupExpressions
          MultiLine           #Yes
          DataSource          #XppMLReviewTable
          DataField           #XPathFilterExpression
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GroupExpressions_XPathResultExpression
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #GroupExpressions
          MultiLine           #Yes
          DataSource          #XppMLReviewTable
          DataField           #XPathResultExpression
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GroupExpressions_XPathSelectExpression
          Width               #Column width
          Height              #Column height
          ElementPosition     #858993458
          HierarchyParent     #GroupExpressions
          MultiLine           #Yes
          DataSource          #XppMLReviewTable
          DataField           #XPathSelectExpression
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ResultsGroup_Result
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #ResultsGroup
          Font                #Consolas
          FontSize            #10
          ShowLabel           #No
          DataSource          #XppMLResultLine
          DataField           #Result
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #StringEditCodeSource
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          Height              #Column height
          AlignControl        #No
          ElementPosition     #1431655764
          HierarchyParent     #TabPageSource
          MultiLine           #Yes
          Font                #Consolas
          FontSize            #10
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #XppMLMarkupResult_Path
          ElementPosition     #1610612733
          HierarchyParent     #GridResult
          DataSource          #XppMLMarkupResult
          DataField           #Path
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #XppMLResultLine_Result
          ElementPosition     #1073741822
          HierarchyParent     #GridResult
          DisplayHeight       #1
          DataSource          #XppMLResultLine
          DataField           #Result
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #Tree
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #TabPageTree
        ENDPROPERTIES
        
        METHODS
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
            #{
            #    super(_oldItem, _newItem, _how);
            #
            #    XppMLManage.findReviewRecordFromTree();
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FTM

; Microsoft Dynamics AX MENUITEM : XppMLReviewTableForm unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #XppMLReviewTableForm
    Type: 1
    PROPERTIES
      Name                #XppMLReviewTableForm
      Label               #@PML51
      HelpText            #@PML52
      Object              #XppMLReviewForm
      ViewUserLicense     #Task
      MaintainUserLicense #Task
      Origin              #{7ADF2091-4F29-4B66-B24D-50C08869B956}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : XppMLProcessProject unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #XppMLProcessProject
    Type: 3
    PROPERTIES
      Name                #XppMLProcessProject
      Label               #@PML49
      HelpText            #@PML50
      ObjectType          #Class
      Object              #XppMLProcessProject
      ViewUserLicense     #Task
      MaintainUserLicense #Task
      Origin              #{5EBD3E6B-68DF-43A1-8170-83FCEF507B3E}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: MNU

; Microsoft Dynamics AX Menu : XppMLMenu unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #XppMLMenu
    PROPERTIES
      Name                #XppMLMenu
      Label               #@PML94
      Origin              #{9E59C734-1404-4713-A89F-6AD4F8A7AFF9}
    ENDPROPERTIES
    
    MENUITEM
      PROPERTIES
        Name                #XppML code review
        MenuItemName        #XppMLReviewTableForm
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Process project objects into xml
        MenuItemType        #Action
        MenuItemName        #XppMLProcessProject
      ENDPROPERTIES
      
    ENDMENUITEM
    MENU #@SYS2186
      PROPERTIES
        Name                #Setup
        Label               #@SYS2186
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Code review parameters
          MenuItemName        #XppMLParameters
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
  ENDMENU
  

***Element: PRN

; Microsoft Dynamics AX Project : XppML unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #XppML
  SHARED
  PROPERTIES
    Name                #XppML
    Origin              #{9FA54C2D-846C-4CC0-8FC2-65A4770B5A4B}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Data_Dictionary
      PROPERTIES
        Name                #Data_Dictionary
        ProjectGroupType    #DataDictionary
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Tables
        PROPERTIES
          Name                #Tables
          ProjectGroupType    #Tables
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 105808
          NODETYPE 204
          NAME #XppMLReviewTable
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 105773
          NODETYPE 204
          NAME #XppMLReviewMethod
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 105798
          NODETYPE 204
          NAME #XppMLResultLine
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 105807
          NODETYPE 204
          NAME #XppMLSourceUpdateTmp
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 105805
          NODETYPE 204
          NAME #XppMLParameters
        ENDNODE
        ENDGROUP
        
      GROUP #Extended_Data_Types
        PROPERTIES
          Name                #Extended_Data_Types
          ProjectGroupType    #ExtendedDataTypes
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105817
          NODETYPE 234
          NAME #XppML
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105810
          NODETYPE 234
          NAME #XppMLReviewName
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105790
          NODETYPE 235
          NAME #XppMLReviewTableRef
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105818
          NODETYPE 234
          NAME #XppMLSQLName
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105819
          NODETYPE 232
          NAME #XppMLTopValue
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105789
          NODETYPE 234
          NAME #XppMLxPathExpression
        ENDNODE
        ENDGROUP
        
      GROUP #Views
        PROPERTIES
          Name                #Views
          ProjectGroupType    #Views
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 105809
          NODETYPE 243
          NAME #XppMLMarkup
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1028063
        NODETYPE 329
        NAME #XppMLManage
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1028082
        NODETYPE 329
        NAME #XppMLProcessProject
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027830
        NODETYPE 329
        NAME #XppMLSourceMarkup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1621
        NODETYPE 329
        NAME #xRefUpdateTmpReferences
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #XppMLParameters
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #XppMLProcessProjectDialog
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #XppMLReviewForm
      ENDNODE
      ENDGROUP
      
    GROUP #Menu_Items
      PROPERTIES
        Name                #Menu_Items
        ProjectGroupType    #MenuItems
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Display
        PROPERTIES
          Name                #Display
          ProjectGroupType    #Display
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 1
          UTILOBJECTID 0
          NODETYPE 296
          NAME #XppMLReviewTableForm
        ENDNODE
        ENDGROUP
        
      GROUP #Action
        PROPERTIES
          Name                #Action
          ProjectGroupType    #Action
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #XppMLProcessProject
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Label_Files
      PROPERTIES
        Name                #Label_Files
        ProjectGroupType    #LabelFiles
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 117
        UTILOBJECTID 0
        NODETYPE 831
        NAME #PML
      ENDNODE
      ENDGROUP
      
    GROUP #Menus
      PROPERTIES
        Name                #Menus
        ProjectGroupType    #Menus
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #XppMLMenu
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
